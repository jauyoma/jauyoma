//+---------------------------------------------------------------------------+
//|                                            EchoServer.cpp                 |
//|                      Copyright © 2018, http://klein-hill.com  |
//|                                       trader@klein-hill.com               |
//+---------------------------------------------------------------------------+

// EchoServer.cpp

#include <winsock2.h>
#pragma comment(lib, "NetEventsProcDLL") // NetEventsProcDLL.lib placed in ...\FastStart\EchoServer\ 
#include <iostream>
#include <conio.h>
#include <cmath>
#include  "cNetEventsProcDLL.h"

BOOL FormatIP(DWORD u32_IP, char* s8_IP);

int main()
{
	int s32_Port = 2000;

	// Try to create server listening on port 2000
	// You may change port.
	DWORD u32_Error = cNetEventsProcDLL::ServerOpen(s32_Port);

	if (u32_Error)
	{
		printf("\nServerOpen() failed with error: %d\n", u32_Error);
		return 1;
	}
	else
		printf("\nServerOpen() fine, we now are waiting for connections...\n");

	DWORD u32_Count = 0, ctrl = 0;
	DWORD u32_CountOld = 0;
	bool close = false, min = false, hr = false;

	int ss_Buf[2];
	double pd_Buf[45];
	DWORD  u32_BufLen = 45;
	int    ps32_ReadLen[6];
	int    ss32_ReadLen = 2;
	int m = ctrl + 35, k = ctrl + 40;
	DWORD p = 0, x = 25, q = 25, z = 25, w = 25, y = 25, t1 = 25, t2 = 25, t3 = 25, t4 = 25, t5 = 25;
	DWORD x1 = 20, q1 = 20, z1 = 20, w1 = 20, y1 = 20, t11 = 20, t22 = 20, t33 = 20, t44 = 20, t55 = 20;
	SYSTEMTIME tym;
	int tickcount = 0;
	double Bid = 0, Ask = 0, MagicNumber = 0, MagicNumber1 = 0, MagicNumber2 = 0, MagicNumber3 = 0, MagicNumber4 = 0;
	double MagicNumber5 = 0, MagicNumber6 = 0, MagicNumber7 = 0, MagicNumber8 = 0, MagicNumber9 = 0;
	double _bid = 0, _bid1 = 0, _bid2 = 0, _bid3 = 0, _bid4 = 0, _ask = 0, _ask1 = 0, _ask2 = 0, _ask3 = 0, _ask4 = 0;
	double _bid5 = 0, _bid6 = 0, _bid7 = 0, _bid8 = 0, _bid9 = 0, _ask5 = 0, _ask6 = 0, _ask7 = 0, _ask8 = 0, _ask9 = 0;
	bool ok = false, ok1 = false, ok2 = false;
	double _typ = 0, _typ1 = 0, _typ2 = 0, _typ3 = 0, _typ4 = 0, cpt = 0, cpt1 = 0, cpt2 = 0, cpt3 = 0, cpt4 = 0, f = 0;
	double _typ5 = 0, _typ6 = 0, _typ7 = 0, _typ8 = 0, _typ9 = 0, cpt5 = 0, cpt6 = 0, cpt7 = 0, cpt8 = 0, cpt9 = 0;
	DWORD start = 1, end, clA = 0, clB = 0;
	WORD t = 0, b, count;

	int ph_Client[12];
	int ps32_ClientIP[12];
	int ps32_ClientCount[1];

	while (!_kbhit())
	{
		u32_Error = cNetEventsProcDLL::GetAllConnections(ph_Client, ps32_ClientIP, ps32_ClientCount);

		if (u32_Error)
		{
			printf("\nGetAllConnections(...) failed with error: %d\n", u32_Error);
			break;
		}
		else
			u32_Count = ps32_ClientCount[0];


		if (u32_Count != u32_CountOld)
		{
			u32_CountOld = u32_Count;

			printf("\nNumber of connections now = %d\n", u32_Count);
			printf("#     h_Connect   (peer IP)\n");

			for (DWORD i = 0; i<u32_Count; i++)
			{
				char  s8_IP[20];
				sprintf(s8_IP, "%s", "123456789012345");

				FormatIP(ps32_ClientIP[i], s8_IP);

				printf("%d      %d       (%s)\n", i, ph_Client[i], s8_IP);
			}
		}

		if (ok == false)
		{
			ctrl = u32_Count;
		}

		if (ctrl == 10 && u32_Count>1)
		{
			ok = true;
			for (DWORD i = 0; i < u32_Count; i++)
			{
				pd_Buf[0] = 0;
				pd_Buf[1] = 0;
				pd_Buf[2] = 0;
				pd_Buf[3] = 0;
				pd_Buf[4] = 0;
				pd_Buf[5] = 0;

				u32_Error = cNetEventsProcDLL::ReadFromDouble(ph_Client[i], pd_Buf, u32_BufLen, ps32_ReadLen);

				if (u32_Error)
				{
					printf("ReadFromDouble(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
				}

				if (!u32_Error)
				{

					if (ps32_ReadLen[0] > 0 && pd_Buf[5] == 0)
					{
						if (i == 0 && (x == 25 || x == 30) && ph_Client[i] != ph_Client[z] && ph_Client[i] != ph_Client[y] && ph_Client[i] != ph_Client[w] && ph_Client[i] != ph_Client[q] && ph_Client[i] != ph_Client[t1] && ph_Client[i] != ph_Client[t2] && ph_Client[i] != ph_Client[t3] && ph_Client[i] != ph_Client[t4] && ph_Client[i] != ph_Client[t5])
						{
							x = i;
						}

						if (i == 1 && (z == 25 || z == 30) && ph_Client[i] != ph_Client[x] && ph_Client[i] != ph_Client[y] && ph_Client[i] != ph_Client[w] && ph_Client[i] != ph_Client[q] && ph_Client[i] != ph_Client[t1] && ph_Client[i] != ph_Client[t2] && ph_Client[i] != ph_Client[t3] && ph_Client[i] != ph_Client[t4] && ph_Client[i] != ph_Client[t5])
						{
							z = i;
						}

						if (i == 2 && (q == 25 || q == 30) && ph_Client[i] != ph_Client[z] && ph_Client[i] != ph_Client[y] && ph_Client[i] != ph_Client[w] && ph_Client[i] != ph_Client[x] && ph_Client[i] != ph_Client[t1] && ph_Client[i] != ph_Client[t2] && ph_Client[i] != ph_Client[t3] && ph_Client[i] != ph_Client[t4] && ph_Client[i] != ph_Client[t5])
						{
							q = i;
						}

						if (i == 3 && (w == 25 || w == 30) && ph_Client[i] != ph_Client[z] && ph_Client[i] != ph_Client[y] && ph_Client[i] != ph_Client[x] && ph_Client[i] != ph_Client[q] && ph_Client[i] != ph_Client[t1] && ph_Client[i] != ph_Client[t2] && ph_Client[i] != ph_Client[t3] && ph_Client[i] != ph_Client[t4] && ph_Client[i] != ph_Client[t5])
						{
							w = i;
						}

						if (i == 4 && (y == 25 || y == 30) && ph_Client[i] != ph_Client[z] && ph_Client[i] != ph_Client[x] && ph_Client[i] != ph_Client[w] && ph_Client[i] != ph_Client[q] && ph_Client[i] != ph_Client[t1] && ph_Client[i] != ph_Client[t2] && ph_Client[i] != ph_Client[t3] && ph_Client[i] != ph_Client[t4] && ph_Client[i] != ph_Client[t5])
						{
							y = i;
						}

						if (i == 5 && (t1 == 25 || t1 == 30) && ph_Client[i] != ph_Client[z] && ph_Client[i] != ph_Client[y] && ph_Client[i] != ph_Client[w] && ph_Client[i] != ph_Client[q] && ph_Client[i] != ph_Client[x] && ph_Client[i] != ph_Client[t2] && ph_Client[i] != ph_Client[t3] && ph_Client[i] != ph_Client[t4] && ph_Client[i] != ph_Client[t5])
						{
							t1 = i;
						}

						if (i == 6 && (t2 == 25 || t2 == 30) && ph_Client[i] != ph_Client[x] && ph_Client[i] != ph_Client[y] && ph_Client[i] != ph_Client[w] && ph_Client[i] != ph_Client[q] && ph_Client[i] != ph_Client[t1] && ph_Client[i] != ph_Client[z] && ph_Client[i] != ph_Client[t3] && ph_Client[i] != ph_Client[t4] && ph_Client[i] != ph_Client[t5])
						{
							t2 = i;
						}

						if (i == 7 && (t3 == 25 || t3 == 30) && ph_Client[i] != ph_Client[z] && ph_Client[i] != ph_Client[y] && ph_Client[i] != ph_Client[w] && ph_Client[i] != ph_Client[x] && ph_Client[i] != ph_Client[t1] && ph_Client[i] != ph_Client[t2] && ph_Client[i] != ph_Client[q] && ph_Client[i] != ph_Client[t4] && ph_Client[i] != ph_Client[t5])
						{
							t3 = i;
						}

						if (i == 8 && (t4 == 25 || t4 == 30) && ph_Client[i] != ph_Client[z] && ph_Client[i] != ph_Client[y] && ph_Client[i] != ph_Client[x] && ph_Client[i] != ph_Client[q] && ph_Client[i] != ph_Client[t1] && ph_Client[i] != ph_Client[t2] && ph_Client[i] != ph_Client[t3] && ph_Client[i] != ph_Client[w] && ph_Client[i] != ph_Client[t5])
						{
							t4 = i;
						}

						if (i == 9 && (t5 == 25 || t5 == 30) && ph_Client[i] != ph_Client[z] && ph_Client[i] != ph_Client[x] && ph_Client[i] != ph_Client[w] && ph_Client[i] != ph_Client[q] && ph_Client[i] != ph_Client[t1] && ph_Client[i] != ph_Client[t2] && ph_Client[i] != ph_Client[t3] && ph_Client[i] != ph_Client[t4] && ph_Client[i] != ph_Client[y])
						{
							t5 = i;
						}

						printf("ReadFromDouble(%d...) read %d double values\n", ph_Client[i], ps32_ReadLen[0]);
						printf("\nReadFromDouble(%d...) Read Data: %9.5f\n", ph_Client[i], pd_Buf[0]);
						printf("\nReadFromDouble(%d...) Read Data: %9.5f\n", ph_Client[i], pd_Buf[1]);
						printf("\nReadFromDouble(%d...) Read Data: %9.5f\n", ph_Client[i], pd_Buf[2]);
						std::cout << "Reading type..:" << pd_Buf[4] << std::endl;

						if (ph_Client[i] == ph_Client[x])
						{
							MagicNumber = pd_Buf[3];
							_typ = pd_Buf[4];
							_ask = pd_Buf[1];
							_bid = pd_Buf[0];
							cpt = pd_Buf[5];
						}

						if (ph_Client[i] == ph_Client[z])
						{
							MagicNumber1 = pd_Buf[3];
							_typ1 = pd_Buf[4];
							_ask1 = pd_Buf[1];
							_bid1 = pd_Buf[0];
							cpt1 = pd_Buf[5];
						}

						if (ph_Client[i] == ph_Client[q])
						{
							MagicNumber2 = pd_Buf[3];
							_typ2 = pd_Buf[4];
							_ask2 = pd_Buf[1];
							_bid2 = pd_Buf[0];
							cpt2 = pd_Buf[5];
						}
						if (ph_Client[i] == ph_Client[w])
						{
							MagicNumber3 = pd_Buf[3];
							_typ3 = pd_Buf[4];
							_ask3 = pd_Buf[1];
							_bid3 = pd_Buf[0];
							cpt3 = pd_Buf[5];
						}
						if (ph_Client[i] == ph_Client[y])
						{
							MagicNumber4 = pd_Buf[3];
							_typ4 = pd_Buf[4];
							_ask4 = pd_Buf[1];
							_bid4 = pd_Buf[0];
							cpt4 = pd_Buf[5];
						}
						if (ph_Client[i] == ph_Client[t1])
						{
							MagicNumber5 = pd_Buf[3];
							_typ5 = pd_Buf[4];
							_ask5 = pd_Buf[1];
							_bid5 = pd_Buf[0];
							cpt5 = pd_Buf[5];
						}

						if (ph_Client[i] == ph_Client[t2])
						{
							MagicNumber6 = pd_Buf[3];
							_typ6 = pd_Buf[4];
							_ask6 = pd_Buf[1];
							_bid6 = pd_Buf[0];
							cpt6 = pd_Buf[5];
						}

						if (ph_Client[i] == ph_Client[t3])
						{
							MagicNumber7 = pd_Buf[3];
							_typ7 = pd_Buf[4];
							_ask7 = pd_Buf[1];
							_bid7 = pd_Buf[0];
							cpt7 = pd_Buf[5];
						}
						if (ph_Client[i] == ph_Client[t4])
						{
							MagicNumber8 = pd_Buf[3];
							_typ8 = pd_Buf[4];
							_ask8 = pd_Buf[1];
							_bid8 = pd_Buf[0];
							cpt8 = pd_Buf[5];
						}
						if (ph_Client[i] == ph_Client[t5])
						{
							MagicNumber9 = pd_Buf[3];
							_typ9 = pd_Buf[4];
							_ask9 = pd_Buf[1];
							_bid9 = pd_Buf[0];
							cpt9 = pd_Buf[5];
						}
						close = true;
					}

					if (pd_Buf[3] != 0)
					{
						printf("\nReadFromDouble(%d...) Read Data: %9.1f\n", ph_Client[i], pd_Buf[3]);
						ss_Buf[0] = 3;
						ss_Buf[1] = 4;

						if (MagicNumber == pd_Buf[3] && ph_Client[i] != ph_Client[x])
						{
							if ((_typ == 1 && _bid<pd_Buf[1]) || (_typ == 2 && _ask>pd_Buf[0]))
							{

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == y)
									{
										y1 = 20;
									}
									if (i == z)
									{
										z1 = 20;
									}
									if (i == q)
									{
										q1 = 20;
									}
									if (i == w)
									{
										w1 = 20;
									}
									if (i == t1)
									{
										t11 = 20;
									}
									if (i == t2)
									{
										t22 = 20;
									}
									if (i == t3)
									{
										t33 = 20;
									}
									if (i == t4)
									{
										t44 = 20;
									}
									if (i == t5)
									{
										t55 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[x], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[x], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[x] << "..." << ss_Buf[0] << std::endl;
									MagicNumber = 0;
									_typ = 0;
									_bid = 0;
									_ask = 0;
									x1 = 20;
								}
							}
						}

						if (MagicNumber1 == pd_Buf[3] && ph_Client[i] != ph_Client[z])
						{
							if ((_typ1 == 1 && _bid1<pd_Buf[1]) || (_typ1 == 2 && _ask1>pd_Buf[0]))
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == y)
									{
										y1 = 20;
									}
									if (i == x)
									{
										x1 = 20;
									}
									if (i == q)
									{
										q1 = 20;
									}
									if (i == w)
									{
										w1 = 20;
									}
									if (i == t1)
									{
										t11 = 20;
									}
									if (i == t2)
									{
										t22 = 20;
									}
									if (i == t3)
									{
										t33 = 20;
									}
									if (i == t4)
									{
										t44 = 20;
									}
									if (i == t5)
									{
										t55 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[z], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[z], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[z] << "..." << ss_Buf[0] << std::endl;
									MagicNumber1 = 0;
									_typ1 = 0;
									_bid1 = 0;
									_ask1 = 0;
									z1 = 20;
								}
							}
						}

						if (MagicNumber2 == pd_Buf[3] && ph_Client[i] != ph_Client[q])
						{
							if ((_typ2 == 1 && _bid2<pd_Buf[1]) || (_typ2 == 2 && _ask2>pd_Buf[0]))
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == y)
									{
										y1 = 20;
									}
									if (i == z)
									{
										z1 = 20;
									}
									if (i == x)
									{
										x1 = 20;
									}
									if (i == w)
									{
										w1 = 20;
									}
									if (i == t1)
									{
										t11 = 20;
									}
									if (i == t2)
									{
										t22 = 20;
									}
									if (i == t3)
									{
										t33 = 20;
									}
									if (i == t4)
									{
										t44 = 20;
									}
									if (i == t5)
									{
										t55 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[q], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[q], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[q] << "..." << ss_Buf[0] << std::endl;
									MagicNumber2 = 0;
									_typ2 = 0;
									_bid2 = 0;
									_ask2 = 0;
									q1 = 20;
								}
							}
						}

						if (MagicNumber3 == pd_Buf[3] && ph_Client[i] != ph_Client[w])
						{
							if ((_typ3 == 1 && _bid3<pd_Buf[1]) || (_typ3 == 2 && _ask3>pd_Buf[0]))
							{

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == y)
									{
										y1 = 20;
									}
									if (i == z)
									{
										z1 = 20;
									}
									if (i == q)
									{
										q1 = 20;
									}
									if (i == x)
									{
										x1 = 20;
									}
									if (i == t1)
									{
										t11 = 20;
									}
									if (i == t2)
									{
										t22 = 20;
									}
									if (i == t3)
									{
										t33 = 20;
									}
									if (i == t4)
									{
										t44 = 20;
									}
									if (i == t5)
									{
										t55 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[w], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[w], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[w] << "..." << ss_Buf[0] << std::endl;
									MagicNumber3 = 0;
									_typ3 = 0;
									_bid3 = 0;
									_ask3 = 0;
									w1 = 20;
								}
							}
						}

						if (MagicNumber4 == pd_Buf[3] && ph_Client[i] != ph_Client[y])
						{
							if ((_typ4 == 1 && _bid4<pd_Buf[1]) || (_typ4 == 2 && _ask4>pd_Buf[0]))
							{

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == x)
									{
										x1 = 20;
									}
									if (i == z)
									{
										z1 = 20;
									}
									if (i == q)
									{
										q1 = 20;
									}
									if (i == w)
									{
										w1 = 20;
									}
									if (i == t1)
									{
										t11 = 20;
									}
									if (i == t2)
									{
										t22 = 20;
									}
									if (i == t3)
									{
										t33 = 20;
									}
									if (i == t4)
									{
										t44 = 20;
									}
									if (i == t5)
									{
										t55 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[y], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[y], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[y] << "..." << ss_Buf[0] << std::endl;
									MagicNumber4 = 0;
									_typ4 = 0;
									_bid4 = 0;
									_ask4 = 0;
									y1 = 20;
								}
							}
						}

						if (MagicNumber5 == pd_Buf[3] && ph_Client[i] != ph_Client[t1])
						{
							if ((_typ5 == 1 && _bid5<pd_Buf[1]) || (_typ5 == 2 && _ask5>pd_Buf[0]))
							{

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == y)
									{
										y1 = 20;
									}
									if (i == z)
									{
										z1 = 20;
									}
									if (i == q)
									{
										q1 = 20;
									}
									if (i == w)
									{
										w1 = 20;
									}
									if (i == x)
									{
										x1 = 20;
									}
									if (i == t2)
									{
										t22 = 20;
									}
									if (i == t3)
									{
										t33 = 20;
									}
									if (i == t4)
									{
										t44 = 20;
									}
									if (i == t5)
									{
										t55 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[t1], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[t1], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[t1] << "..." << ss_Buf[0] << std::endl;
									MagicNumber5 = 0;
									_typ5 = 0;
									_bid5 = 0;
									_ask5 = 0;
									t11 = 20;
								}
							}
						}

						if (MagicNumber6 == pd_Buf[3] && ph_Client[i] != ph_Client[t2])
						{
							if ((_typ6 == 1 && _bid6<pd_Buf[1]) || (_typ6 == 2 && _ask6>pd_Buf[0]))
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == y)
									{
										y1 = 20;
									}
									if (i == x)
									{
										x1 = 20;
									}
									if (i == q)
									{
										q1 = 20;
									}
									if (i == w)
									{
										w1 = 20;
									}
									if (i == t1)
									{
										t11 = 20;
									}
									if (i == z)
									{
										z1 = 20;
									}
									if (i == t3)
									{
										t33 = 20;
									}
									if (i == t4)
									{
										t44 = 20;
									}
									if (i == t5)
									{
										t55 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[t2], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[t2], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[t2] << "..." << ss_Buf[0] << std::endl;
									MagicNumber6 = 0;
									_typ6 = 0;
									_bid6 = 0;
									_ask6 = 0;
									t22 = 20;
								}
							}
						}

						if (MagicNumber7 == pd_Buf[3] && ph_Client[i] != ph_Client[t3])
						{
							if ((_typ7 == 1 && _bid7<pd_Buf[1]) || (_typ7 == 2 && _ask7>pd_Buf[0]))
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == y)
									{
										y1 = 20;
									}
									if (i == z)
									{
										z1 = 20;
									}
									if (i == x)
									{
										x1 = 20;
									}
									if (i == w)
									{
										w1 = 20;
									}
									if (i == t1)
									{
										t11 = 20;
									}
									if (i == t2)
									{
										t22 = 20;
									}
									if (i == q)
									{
										q1 = 20;
									}
									if (i == t4)
									{
										t44 = 20;
									}
									if (i == t5)
									{
										t55 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[t3], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[t3], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[t3] << "..." << ss_Buf[0] << std::endl;
									MagicNumber7 = 0;
									_typ7 = 0;
									_bid7 = 0;
									_ask7 = 0;
									t33 = 20;
								}
							}
						}

						if (MagicNumber8 == pd_Buf[3] && ph_Client[i] != ph_Client[t4])
						{
							if ((_typ8 == 1 && _bid8<pd_Buf[1]) || (_typ8 == 2 && _ask8>pd_Buf[0]))
							{

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == y)
									{
										y1 = 20;
									}
									if (i == z)
									{
										z1 = 20;
									}
									if (i == q)
									{
										q1 = 20;
									}
									if (i == x)
									{
										x1 = 20;
									}
									if (i == t1)
									{
										t11 = 20;
									}
									if (i == t2)
									{
										t22 = 20;
									}
									if (i == t3)
									{
										t33 = 20;
									}
									if (i == w)
									{
										w1 = 20;
									}
									if (i == t5)
									{
										t55 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[t4], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[t4], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[t4] << "..." << ss_Buf[0] << std::endl;
									MagicNumber8 = 0;
									_typ8 = 0;
									_bid8 = 0;
									_ask8 = 0;
									t44 = 20;
								}
							}
						}

						if (MagicNumber9 == pd_Buf[3] && ph_Client[i] != ph_Client[t5])
						{
							if ((_typ9 == 1 && _bid9<pd_Buf[1]) || (_typ9 == 2 && _ask9>pd_Buf[0]))
							{

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
									if (i == x)
									{
										x1 = 20;
									}
									if (i == z)
									{
										z1 = 20;
									}
									if (i == q)
									{
										q1 = 20;
									}
									if (i == w)
									{
										w1 = 20;
									}
									if (i == t1)
									{
										t11 = 20;
									}
									if (i == t2)
									{
										t22 = 20;
									}
									if (i == t3)
									{
										t33 = 20;
									}
									if (i == t4)
									{
										t44 = 20;
									}
									if (i == y)
									{
										y1 = 20;
									}
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[t5], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[t5], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[t5] << "..." << ss_Buf[0] << std::endl;
									MagicNumber9 = 0;
									_typ9 = 0;
									_bid9 = 0;
									_ask9 = 0;
									t55 = 20;
								}
							}
						}
					}

				}

			}

			if (min == false)
			{
				if (x != 25 && _typ == 0 && x1 == 20)
				{
					Bid = _bid;
					m = x;
				}
				if (_bid1 > Bid && z != 25 && _typ1 == 0 && z1 == 20)
				{
					Bid = _bid1;
					m = z;
				}
				if (_bid2 > Bid && q != 25 && _typ2 == 0 && q1 == 20)
				{
					Bid = _bid2;
					m = q;
				}
				if (_bid3 > Bid && w != 25 && _typ3 == 0 && w1 == 20)
				{
					Bid = _bid3;
					m = w;
				}
				if (_bid4 > Bid && y != 25 && _typ4 == 0 && y1 == 20)
				{
					Bid = _bid4;
					m = y;
				}
				if (_bid5 > Bid && t1 != 25 && _typ5 == 0 && t11 == 20)
				{
					Bid = _bid5;
					m = t1;
				}
				if (_bid6 > Bid && t2 != 25 && _typ6 == 0 && t22 == 20)
				{
					Bid = _bid6;
					m = t2;
				}
				if (_bid7 > Bid && t3 != 25 && _typ7 == 0 && t33 == 20)
				{
					Bid = _bid7;
					m = t3;
				}
				if (_bid8 > Bid && t4 != 25 && _typ8 == 0 && t44 == 20)
				{
					Bid = _bid8;
					m = t4;
				}
				if (_bid9 > Bid && t5 != 25 && _typ9 == 0 && t55 == 20)
				{
					Bid = _bid9;
					m = t5;
				}

				if (x != m && x != 25 && _ask == 0 && _typ == 0 && x1 == 20)
				{
					Ask = _ask;
					k = x;
				}
				if (((_ask1 < Ask && _ask1 != 0) || Ask == 0) && z != m && z != 25 && _typ1 == 0 && z1 == 20)
				{
					Ask = _ask1;
					k = z;
				}
				if (((_ask2 < Ask && _ask2 != 0) || Ask == 0) && q != m && q != 25 && _typ2 == 0 && q1 == 20)
				{
					Ask = _ask2;
					k = q;
				}
				if (((_ask3 < Ask && _ask3 != 0) || Ask == 0) && w != m && w != 25 && _typ3 == 0 && w1 == 20)
				{
					Ask = _ask3;
					k = w;
				}
				if (((_ask4 < Ask && _ask4 != 0) || Ask == 0) && y != m && y != 25 && _typ4 == 0 && y1 == 20)
				{
					Ask = _ask4;
					k = y;
				}
				if (((_ask5 < Ask && _ask5 != 0) || Ask == 0) && t1 != m && t1 != 25 && _typ5 == 0 && t11 == 20)
				{
					Ask = _ask5;
					k = t1;
				}
				if (((_ask6 < Ask && _ask6 != 0) || Ask == 0) && t2 != m && t2 != 25 && _typ6 == 0 && t22 == 20)
				{
					Ask = _ask6;
					k = t2;
				}
				if (((_ask7 < Ask && _ask7 != 0) || Ask == 0) && t3 != m && t3 != 25 && _typ7 == 0 && t33 == 20)
				{
					Ask = _ask7;
					k = t3;
				}
				if (((_ask8 < Ask && _ask8 != 0) || Ask == 0) && t4 != m && t4 != 25 && _typ8 == 0 && t44 == 20)
				{
					Ask = _ask8;
					k = t4;
				}
				if (((_ask9 < Ask && _ask9 != 0) || Ask == 0) && t5 != m && t5 != 25 && _typ9 == 0 && t55 == 20)
				{
					Ask = _ask9;
					k = t5;
				}
			}

			if (close == true)
			{
				std::cout << "min value..." << min << std::endl;
				std::cout << "Client" << std::endl;
				std::cout << x << "..." << ph_Client[x] << std::endl;
				std::cout << z << "..." << ph_Client[z] << std::endl;
				std::cout << q << "..." << ph_Client[q] << std::endl;
				std::cout << w << "..." << ph_Client[w] << std::endl;
				std::cout << y << "..." << ph_Client[y] << std::endl;
				std::cout << t1 << "..." << ph_Client[t1] << std::endl;
				std::cout << t2 << "..." << ph_Client[t2] << std::endl;
				std::cout << t3 << "..." << ph_Client[t3] << std::endl;
				std::cout << t4 << "..." << ph_Client[t4] << std::endl;
				std::cout << t5 << "..." << ph_Client[t5] << std::endl;
				std::cout << "2nd Client" << std::endl;
				std::cout << x1 << "..." << ph_Client[x] << std::endl;
				std::cout << z1 << "..." << ph_Client[z] << std::endl;
				std::cout << q1 << "..." << ph_Client[q] << std::endl;
				std::cout << w1 << "..." << ph_Client[w] << std::endl;
				std::cout << y1 << "..." << ph_Client[y] << std::endl;
				std::cout << t11 << "..." << ph_Client[t1] << std::endl;
				std::cout << t22 << "..." << ph_Client[t2] << std::endl;
				std::cout << t33 << "..." << ph_Client[t3] << std::endl;
				std::cout << t44 << "..." << ph_Client[t4] << std::endl;
				std::cout << t55 << "..." << ph_Client[t5] << std::endl;
				std::cout << "Derived" << std::endl;
				std::cout << Bid << std::endl;
				std::cout << Ask << std::endl;
				std::cout << "Hold" << std::endl;
				std::cout << m << std::endl;
				std::cout << k << std::endl;
				std::cout << "Magic" << std::endl;
				std::cout << tickcount << std::endl;
				std::cout << "Bid" << std::endl;
				std::cout << _bid << std::endl;
				std::cout << _bid1 << std::endl;
				std::cout << _bid2 << std::endl;
				std::cout << _bid3 << std::endl;
				std::cout << _bid4 << std::endl;
				std::cout << _bid5 << std::endl;
				std::cout << _bid6 << std::endl;
				std::cout << _bid7 << std::endl;
				std::cout << _bid8 << std::endl;
				std::cout << _bid9 << std::endl;
				std::cout << "Ask" << std::endl;
				std::cout << _ask << std::endl;
				std::cout << _ask1 << std::endl;
				std::cout << _ask2 << std::endl;
				std::cout << _ask3 << std::endl;
				std::cout << _ask4 << std::endl;
				std::cout << _ask5 << std::endl;
				std::cout << _ask6 << std::endl;
				std::cout << _ask7 << std::endl;
				std::cout << _ask8 << std::endl;
				std::cout << _ask9 << std::endl;
				std::cout << "pd_4" << std::endl;
				std::cout << _typ << std::endl;
				std::cout << _typ1 << std::endl;
				std::cout << _typ2 << std::endl;
				std::cout << _typ3 << std::endl;
				std::cout << _typ4 << std::endl;
				std::cout << _typ5 << std::endl;
				std::cout << _typ6 << std::endl;
				std::cout << _typ7 << std::endl;
				std::cout << _typ8 << std::endl;
				std::cout << _typ9 << std::endl;
				close = false;
			}

			if (m != k && min == false && m <= ctrl && k <= ctrl && Bid != 0 && Ask != 0 && ph_Client[m] != ph_Client[k])
			{
				tickcount = tickcount + 1;
				ss_Buf[0] = tickcount;
				ss_Buf[1] = 1;
				std::cout << "First reading:" << ph_Client[m] << std::endl;
				std::cout << ss_Buf[1] << std::endl;

				u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[m], ss_Buf, ss32_ReadLen);

				if (u32_Error)
				{
					printf("M SendToInt(%d...) failed with error: %d\n", ph_Client[m], u32_Error);
					hr = true;
				}
				else
				{
					printf("M SendToInt(%d...) sent %d int values\n", ph_Client[m], ps32_ReadLen[0]);
					std::cout << ss_Buf[1] << "..Client..:" << ph_Client[m] << std::endl;
					_ask = 0;
					_ask1 = 0;
					_ask2 = 0;
					_ask3 = 0;
					_ask4 = 0;
					_ask5 = 0;
					_ask6 = 0;
					_ask7 = 0;
					_ask8 = 0;
					_ask9 = 0;
					_bid = 0;
					_bid1 = 0;
					_bid2 = 0;
					_bid3 = 0;
					_bid4 = 0;
					_bid5 = 0;
					_bid6 = 0;
					_bid7 = 0;
					_bid8 = 0;
					_bid9 = 0;
					_typ = 0;
					_typ1 = 0;
					_typ2 = 0;
					_typ3 = 0;
					_typ4 = 0;
					_typ5 = 0;
					_typ6 = 0;
					_typ7 = 0;
					_typ8 = 0;
					_typ9 = 0;
					MagicNumber = 0;
					MagicNumber1 = 0;
					MagicNumber2 = 0;
					MagicNumber3 = 0;
					MagicNumber4 = 0;
					MagicNumber5 = 0;
					MagicNumber6 = 0;
					MagicNumber7 = 0;
					MagicNumber8 = 0;
					MagicNumber9 = 0;
					start = GetTickCount();
				}

				ss_Buf[1] = 2;

				if (hr == false)
				{
					std::cout << "Second reading:" << ph_Client[k] << std::endl;
					u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[k], ss_Buf, ss32_ReadLen);

					if (u32_Error)
					{
						printf("K SendToInt(%d...) failed with error: %d\n", ph_Client[k], u32_Error);
						min = true;
					}
					else
					{
						printf("K SendToInt(%d...) sent %d int values\n", ph_Client[k], ps32_ReadLen[0]);
						std::cout << ss_Buf[1] << "..Client..:" << ph_Client[k] << std::endl;
						Sleep(5000);
					}

				}

				if (hr == false)
				{
					t = 0;
					count = 0;
					pd_Buf[4] = 0;

					while (t<2)
					{
						if (min != true)
						{
							if (ok1 == false)
							{
								u32_Error = cNetEventsProcDLL::ReadFromDouble(ph_Client[k], pd_Buf, u32_BufLen, ps32_ReadLen);

								if (!u32_Error)
								{
									if (pd_Buf[4] > 0)
									{
										ok1 = true;
									}

								}
							}

						}

						if (ok2 == false)
						{
							u32_Error = cNetEventsProcDLL::ReadFromDouble(ph_Client[m], pd_Buf, u32_BufLen, ps32_ReadLen);

							if (!u32_Error)
							{
								if (pd_Buf[4] > 0)
								{
									ok2 = true;
								}
							}
						}

						if (ok1 == true && ok2 == true)
						{
							Sleep(5000);
							ss_Buf[0] = 0;
							if (min == false)
							{
								ss_Buf[1] = 7;
							}

							if (min == true)
							{
								ss_Buf[1] = 8;
							}
							u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[m], ss_Buf, ss32_ReadLen);

							if (u32_Error)
							{
								printf("Exit M instructions(%d...) failed with error: %d\n", ph_Client[m], u32_Error);
							}
							else
							{
								printf("Successful M exit instructions(%d...) sent %d int values\n", ph_Client[m], ps32_ReadLen[0]);
								hr = true;
								t++;
								if (m == x)
								{
									x = 30;
									x1 = 30;
								}
								if (m == y)
								{
									y = 30;
									y1 = 30;
								}
								if (m == z)
								{
									z = 30;
									z1 = 30;
								}
								if (m == q)
								{
									q = 30;
									q1 = 30;
								}
								if (m == w)
								{
									w = 30;
									w1 = 30;
								}
								if (m == t1)
								{
									t1 = 30;
									t11 = 30;
								}
								if (m == t2)
								{
									t2 = 30;
									t22 = 30;
								}
								if (m == t3)
								{
									t3 = 30;
									t33 = 30;
								}
								if (m == t4)
								{
									t4 = 30;
									t44 = 30;
								}
								if (m == t5)
								{
									t5 = 30;
									t55 = 30;
								}
							}

							if (min != true)
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[k], ss_Buf, ss32_ReadLen);

								if (u32_Error)
								{
									printf("Exit K instructions(%d...) failed with error: %d\n", ph_Client[k], u32_Error);
								}
								else
								{
									printf("Successful K exit instructions(%d...) sent %d int values\n", ph_Client[k], ps32_ReadLen[0]);
									t++;
									if (k == x)
									{
										x = 30;
										x1 = 30;
									}
									if (k == y)
									{
										y = 30;
										y1 = 30;
									}
									if (k == z)
									{
										z = 30;
										z1 = 30;
									}
									if (k == q)
									{
										q = 30;
										q1 = 30;
									}
									if (k == w)
									{
										w = 30;
										w1 = 30;
									}
									if (k == t1)
									{
										t1 = 30;
										t11 = 30;
									}
									if (k == t2)
									{
										t2 = 30;
										t22 = 30;
									}
									if (k == t3)
									{
										t3 = 30;
										t33 = 30;
									}
									if (k == t4)
									{
										t4 = 30;
										t44 = 30;
									}
									if (k == t5)
									{
										t5 = 30;
										t55 = 30;
									}
								}
							}
						}
						end = (GetTickCount() - start) / 1000;

						if (min == true || end > 119)
						{
							t = 2;
							ss_Buf[0] = 9;
							ss_Buf[1] = 8;
							if (ok1 == false && ok2 == true)
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[m], ss_Buf, ss32_ReadLen);
							}
							if (ok2 == false && ok1 == true)
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[k], ss_Buf, ss32_ReadLen);
							}
							if ((ok2 == false && ok1 == false) || (ok2 == true && ok1 == true))
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[k], ss_Buf, ss32_ReadLen);
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[m], ss_Buf, ss32_ReadLen);
							}
							std::cout << "..end reached..:" << std::endl;
							system("pause");
							break;
						}
					}
				}
				std::cout << "..OK1..:" << ok1 << std::endl;
				std::cout << "..OK2..:" << ok2 << std::endl;
			}
			ok1 = false;
			ok2 = false;
			hr = false;
			p = 0;
			Bid = 0;
			Ask = 0;
			f = 0;
			m = ctrl + 35;
			k = ctrl + 40;
		}
	}
	system("pause");
	u32_Error = cNetEventsProcDLL::ServerClose();

	if (u32_Error)
	{
		printf("\nServerClose() failed with error: %d\n", u32_Error);
		return 1;
	}
	else
		printf("\nServerClose() fine...\n");

	Sleep(10000);
	return 0;
}

BOOL FormatIP(DWORD u32_IP, char* s8_IP)
{
	DWORD u32_Len = strlen(s8_IP);

	if (u32_Len < 15)
		return FALSE;

	BYTE* pu8_Addr = (BYTE*)&u32_IP;
	sprintf(s8_IP, "%d.%d.%d.%d", pu8_Addr[0], pu8_Addr[1], pu8_Addr[2], pu8_Addr[3]);

	return TRUE;
}
