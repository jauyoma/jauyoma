//+---------------------------------------------------------------------------+
//|                      Client.mq4                                           |
//|                      http://www.klein-hill.com                            |
//|                      forex@klein-hill.com                                 |
//+---------------------------------------------------------------------------+
#include <ImportNetEventsProcDLL.mqh>
/*int ConnectTo(string  ps8_ServerIP, // in - string ps8_ServerIP = "0123456789123456"
                int     s32_Port,     // in 
                int&    ph_Client[]); // out - int ph_Client[1]
*/
/*int SendToDouble(int     h_Client,        // in
                   double& pd_SendBuf[],    // in
                   int     s32_SendBufLen); // in - SendBuf[] array size in double element 
*/
/*int ReadFromDouble(int     h_Client,        // in
                     double& pd_ReadBuf[],    // in
                     int     s32_ReadBufLen,  // in  - ReadBuf[] array size in double element
                     int&    ps32_ReadLen[]); // out - int ps32_ReadLen[1] - count of actually read data in double element
*/                      
/*int ConnectClose(int h_Client);    // in
*/ 
       
// Globals variables
extern string Symbol_A = "EURUSD";
extern string Symbol_B = "GBPUSD";
extern string Symbol_C = "AUDUSD";
extern string Symbol_D = "NZDUSD";
int s32_Error=1;
int i, j;
// for int ConnectTo(ps8_ServerIP, s32_Port, ph_Client);  // out - int h_Client[1]
extern string ps8_ServerIP = "192.168.1.106";  // mine local IP
int    s32_Port = 2000;
uchar  uc_ServerIP[];
int    ph_Client[1];

bool b_ConnectTo = false, close, exit, info = false, info1 = false, info2 = false, info3 = false, blacklist = false;
bool send = false, send1 = false, send2 = false, send3 = false;
// for int SendToDouble(ph_Client[0], pd_Buf, s32_BufLen);  
// for int ReadFromDouble(ph_Client[0], pd_Buf, s32_BufLen, ps32_ReadLen);

double pd_Buf[22];
int    s32_BufLen = 22;
int    ps32_ReadLen[22];
double tickcount=0, buycount = 0.001, sellcount = 30;

double _bid = 0, _bid1 = 0, _bid2 = 0, _bid3 = 0, curr_bidpx;
double _ask = 0, _ask1 = 0, _ask2 = 0, _ask3 = 0, curr_askpx;
int openbuy, opensell, MagicNumber, Magic, Magic1, Magic2, Magic3, typ, typ1, typ2, typ3;
int min, hr, curr_min, curr_hr, curr_open, status, status1, status2, status3;
int sym1 = 0, sym2 = 0, sym3 = 0, sym4 = 0;
double len, price, type;
uint begin = 0, end = 0, begin1 = 0, end1 = 0, begin2 = 0, end2 = 0, begin3 = 0, end3 = 0;

int ss_Buf[2];
double pd_Value[22];

//+------------------------------------------------------------------+
//| expert initialization function                                   |
//+------------------------------------------------------------------+
void OnInit()
{
//----
  EventSetMillisecondTimer(10);
  StringToCharArray(ps8_ServerIP,uc_ServerIP);
   
   if(!b_ConnectTo)
   {
      s32_Error = ConnectTo(uc_ServerIP, s32_Port, ph_Client);
      Print("ConnectTo(...) return is: ",GetErrMsg(s32_Error));
      Print("ConnectTo(...) handle is: ",ph_Client[0]);
      
      if (s32_Error == OK)
      {
         b_ConnectTo = true;
         Print("Client now is ConnectTo the Server: ",ps8_ServerIP);
      }
   }

//----

}
//+------------------------------------------------------------------+
//| expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
//----

      s32_Error = ConnectClose(ph_Client[0]);
      Print("ConnectClose(...) return is: ",GetErrMsg(s32_Error));
      
      if (s32_Error == OK)
         b_ConnectTo = false;
   
   EventKillTimer();
//----
}  

void OnTimer()
{
//----   
      
   RefreshRates();
   MqlTick tick;

   
  end = (GetTickCount()- begin)/1000;
  end1 = (GetTickCount()- begin1)/1000;
  end2 = (GetTickCount()- begin2)/1000;
  end3 = (GetTickCount()- begin3)/1000;
  
  if(end>180 || end1>180 || end2>180 || end3>180)
  {
        if(b_ConnectTo==false)
        {
            s32_Error = ConnectTo(uc_ServerIP, s32_Port, ph_Client);
            if (s32_Error == OK)
            {
               b_ConnectTo = true;
            }
        }
  }
  
 if(b_ConnectTo == true && blacklist == false)
 {  
    if(sym1>0)
    {
        int ss_Value[10];  
        status = 2;
        info = false;
    
        for(j=0; j<OrdersTotal(); j++)          
        {
            if (OrderSelect(j,SELECT_BY_POS,MODE_TRADES)==true) 
            {
                if(OrderSymbol()==Symbol_A)
                {
                    Magic = NormalizeDouble(OrderMagicNumber(),0);
                    if(OrderType()==OP_BUY)
                    {
                        typ = 1;
                    }
                    else
                    typ = 2;           
                }    
            }   
        }
    
        if(end<=120)
        {
            pd_Value[3] = 0;
            pd_Value[4] = typ;
            while(exit==false)
            {          
                s32_Error = ReadFromInt(ph_Client[0], ss_Value, s32_BufLen, ps32_ReadLen);
            
                if(ps32_ReadLen[0]>0)
                {
                    Print("ReadFromInt(",ph_Client[0],"...) opened with live order");
         
                    if(ss_Value[1]==8 && typ == 1)
                    {
             	        close = OrderClose(OrderTicket(),OrderLots(),Bid,1,Red);
             	        Alert("Closed");
             	        Comment("");
             	        exit = true;
		                sym1 = 0;
                    }
			        if(ss_Value[1]==8 && typ == 2)
                    {
             	        close = OrderClose(OrderTicket(),OrderLots(),Ask,1,Red);
             	        Alert("Closed");
             	        Comment("");
             	        exit = true;
		                sym1 = 0;
                    }       
	 
                    if(ss_Value[1]==7)
                    {
                        Alert("Disconnecting client...",typ);
                        s32_Error = ConnectClose(ph_Client[0]);
                        b_ConnectTo=false;
                        exit = true;
                    }
	 
	                if(end > 20)
                    {
                        pd_Value[5] = 1;
	                    if(typ == 1)
                        {
             	            close = OrderClose(OrderTicket(),OrderLots(),Bid,1,Red);
                        }
			            if(typ == 2)
                        {
             	            close = OrderClose(OrderTicket(),OrderLots(),Ask,1,Red);
                        }
	                    Alert("Client Blacklisted...");
                        s32_Error = ConnectClose(ph_Client[0]);
                        b_ConnectTo=false;
                        exit = true;
	                    blacklist = true;
                    }
                }
            }
        }
   
        if(end>240)
        {  
            pd_Value[3] = Magic;
            pd_Value[4] = typ;
        
            if(b_ConnectTo==true)
            {          
                s32_Error = ReadFromInt(ph_Client[0], ss_Value, s32_BufLen, ps32_ReadLen);
            
                if(ps32_ReadLen[0]>0)
                {
                    Print("ReadFromInt(",ph_Client[0],"...) opened with live order");
                    Print("Symbol_A...",ss_Value[0],"...",ss_Value[1]);
         
                    if((ss_Value[0]==3 || end > 480) && typ == 1)
                    {
             	        close = OrderClose(OrderTicket(),OrderLots(),Bid,1,Red);
		                sym1 = 0;
                    }
			        if((ss_Value[0]==3 || end > 480) && typ == 2)
                    {
             	        close = OrderClose(OrderTicket(),OrderLots(),Ask,1,Red);
		                sym1 = 0;
                    }
                }
            }
        }
    }
   
    if(sym1==0 && status==0)
    { 
        typ = 0; 
        exit = false;
        status = 1;
        pd_Value[3] = 0;
        pd_Value[4] = 0;
        pd_Value[5] = 0;

        s32_Error = ReadFromInt(ph_Client[0], ss_Buf, s32_BufLen, ps32_ReadLen); 

        if(ps32_ReadLen[0]>0 && ss_Buf[0]!=0)
        {
            Print("ReadFromInt(",ph_Client[0],"...) No order opened");
            Print("Symbol_A...",ss_Buf[0],"....",ss_Buf[1]);
          
            MagicNumber = ss_Buf[0];
            if(ss_Buf[1]==2 && OrdersTotal()==0)
            {
                openbuy = OrderSend(Symbol_A,OP_BUY,0.01,Ask,1,0,0,"Arbitrage Trader",MagicNumber,0,Blue);
                begin = GetTickCount();
	            sym1 = 1;
            }
            if(ss_Buf[1]==1 && OrdersTotal()==0)
            {
                opensell = OrderSend(Symbol_A,OP_SELL,0.01,Bid,1,0,0,"Arbitrage Trader",MagicNumber,0,Blue);
                begin = GetTickCount();
	            sym1 = 1;
            }
        }
    } 
   
    if(SymbolInfoTick(Symbol_A,tick) && b_ConnectTo==true)
    {          
        pd_Value[0] = NormalizeDouble(tick.bid,Digits);
        pd_Value[1] = NormalizeDouble(tick.ask,Digits);
        if(sym1==0 && status==2)
        {
            pd_Value[3] = 0;
            pd_Value[4] = 0;
        }
	    if(sym1>0 && status==1)
        {
            pd_Value[3] = 0;
            pd_Value[4] = 3;
            info = true;
        }
      
        if(_bid!=tick.bid || _ask!=tick.ask || info == true)
        {         
	        send = true;
	        _bid = tick.bid;
            _ask = tick.ask;
        }    
    }
    
    if(send == true || send1 == true || send2 == true || send3 == true)
    {
    	pd_Value[2] = AccountEquity();
    	s32_Error = SendToDouble(ph_Client[0], pd_Value, s32_BufLen); 
   
    	if (s32_Error != 0)
    	{
        	Print("SendToDouble(",ph_Client[0],"...) Return is: ",GetErrMsg(s32_Error));
        	if((sym1==1 && end<=120) || (sym2==1 && end1<=120) || (sym3==1 && end2<=120) || (sym4==1 && end3<=120))
        	{
             		Print("Initial disconnect attepmpt failed...");
             		s32_Error = ConnectClose(ph_Client[0]);
             		b_ConnectTo = false;
        	}
    	}
    	else
    	{
        	if(send == true)
        	{
        	    status = 0;
        	}
        	if(send1 == true)
        	{
		        status1 = 0;
        	}
        	if(send2 == true)
        	{
		        status2 = 0;
        	}
        	if(send3 == true)
        	{
		        status3 = 0;
        	}
        	if(info==true || info1==true || info2==true || info3==true)
        	{
            		Print("SendToDouble(",ph_Client[0],"...) Return is: ",GetErrMsg(s32_Error));
        	}
    	}
    }   
 }
}
