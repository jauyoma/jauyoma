//+---------------------------------------------------------------------------+
//|                                            EchoServer.cpp                 |
//|                      Copyright © 2012, http://www.mql4.com/ru/users/more  |
//|                                       tradertobe@gmail.com                |
//+---------------------------------------------------------------------------+

// EchoServer.cpp

#include <winsock2.h>
#pragma comment(lib, "NetEventsProcDLL") // NetEventsProcDLL.lib placed in ...\FastStart\EchoServer\ 
#include <iostream>
#include <conio.h>
#include <cmath>

#include  "cNetEventsProcDLL.h"

BOOL FormatIP(DWORD u32_IP, char* s8_IP);

int main()
{
	int s32_Port = 2000;

	// Try to create server listening on port 2000
	// You may change port.
	DWORD u32_Error = cNetEventsProcDLL::ServerOpen(s32_Port);

	if (u32_Error)
	{
		printf("\nServerOpen() failed with error: %d\n", u32_Error);
		return 1;
	}
	else
		printf("\nServerOpen() fine, we now are waiting for connections...\n");

	DWORD u32_Count = 0, ctrl = 0;
	DWORD u32_CountOld = 0;
	bool close = false, min = false, hr = false;

	int ss_Buf[1025];
	double pd_Buf[1025];
	DWORD  u32_BufLen = 1025;
	int    ps32_ReadLen[5];
	int m = ctrl + 35, k = ctrl + 40;
	DWORD p = 0, x = 25, q = 25, z = 25, w = 25, y = 25;
	SYSTEMTIME tym;
	int tickcount = 0;
	double Bid = 0, Ask = 0, MagicNumber = 0, MagicNumber1 = 0, MagicNumber2 = 0, MagicNumber3 = 0, MagicNumber4 = 0;
	double _bid = 0, _bid1 = 0, _bid2 = 0, _bid3 = 0, _bid4 = 0, _ask = 0, _ask1 = 0, _ask2 = 0, _ask3 = 0, _ask4 = 0;
	bool ok = false, ok1 = false, ok2 = false;
	double _typ = 0, _typ1 = 0, _typ2 = 0, _typ3 = 0, _typ4 = 0, cpt = 0, cpt1 = 0, cpt2 = 0, cpt3 = 0, cpt4 = 0, f = 0;
	DWORD start = 1, end;
	WORD t = 0;

	int ph_Client[62];
	int ps32_ClientIP[62];
	int ps32_ClientCount[1];

	while (!_kbhit())
	{
		u32_Error = cNetEventsProcDLL::GetAllConnections(ph_Client, ps32_ClientIP, ps32_ClientCount);

		if (u32_Error)
		{
			printf("\nGetAllConnections(...) failed with error: %d\n", u32_Error);
			break;
		}
		else
			u32_Count = ps32_ClientCount[0];


		if (u32_Count != u32_CountOld)
		{
			u32_CountOld = u32_Count;

			printf("\nNumber of connections now = %d\n", u32_Count);
			printf("#     h_Connect   (peer IP)\n");

			for (DWORD i = 0; i<u32_Count; i++)
			{
				char  s8_IP[20];
				sprintf(s8_IP, "%s", "123456789012345");

				FormatIP(ps32_ClientIP[i], s8_IP);

				printf("%d      %d       (%s)\n", i, ph_Client[i], s8_IP);
			}
		}

		if (ok == false)
		{
			ctrl = u32_Count;
		}

		if (ctrl == 5 && u32_Count>1)
		{
			ok = true;
			for (DWORD i = 0; i < u32_Count; i++)
			{
				pd_Buf[0] = 0;
				pd_Buf[1] = 0;
				pd_Buf[2] = 0;
				pd_Buf[3] = 0;
				pd_Buf[4] = 0;

				u32_Error = cNetEventsProcDLL::ReadFromDouble(ph_Client[i], pd_Buf, u32_BufLen, ps32_ReadLen);

				if (u32_Error)
				{
					printf("ReadFromDouble(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
				}

				if (!u32_Error)
				{

					if (ps32_ReadLen[0] > 0)
					{
						if (i == 0 && (x == 25 || (x == 30 && pd_Buf[4] != 0)))
						{
							x = i;
						}

						if (i == 1 && (z == 25 || (z == 30 && pd_Buf[4] != 0)))
						{
							z = i;
						}

						if (i == 2 && (q == 25 || (q == 30 && pd_Buf[4] != 0)))
						{
							q = i;
						}

						if (i == 3 && (w == 25 || (w == 30 && pd_Buf[4] != 0)))
						{
							w = i;
						}

						if (i == 4 && (y == 25 || (y == 30 && pd_Buf[4] != 0)))
						{
							y = i;
						}

						printf("ReadFromDouble(%d...) read %d double values\n", ph_Client[i], ps32_ReadLen[0]);
						printf("\nReadFromDouble(%d...) Read Data: %9.5f\n", ph_Client[i], pd_Buf[0]);
						printf("\nReadFromDouble(%d...) Read Data: %9.5f\n", ph_Client[i], pd_Buf[1]);
						printf("\nReadFromDouble(%d...) Read Data: %9.5f\n", ph_Client[i], pd_Buf[2]);
						std::cout << "Reading type..:" << pd_Buf[4] << std::endl;

						if (ph_Client[i] == ph_Client[x])
						{
							MagicNumber = pd_Buf[3];
							_typ = pd_Buf[4];
							_ask = pd_Buf[1];
							_bid = pd_Buf[0];
							cpt = pd_Buf[4];
						}

						if (ph_Client[i] == ph_Client[z])
						{
							MagicNumber1 = pd_Buf[3];
							_typ1 = pd_Buf[4];
							_ask1 = pd_Buf[1];
							_bid1 = pd_Buf[0];
							cpt1 = pd_Buf[4];
						}

						if (ph_Client[i] == ph_Client[q])
						{
							MagicNumber2 = pd_Buf[3];
							_typ2 = pd_Buf[4];
							_ask2 = pd_Buf[1];
							_bid2 = pd_Buf[0];
							cpt2 = pd_Buf[4];
						}
						if (ph_Client[i] == ph_Client[w])
						{
							MagicNumber3 = pd_Buf[3];
							_typ3 = pd_Buf[4];
							_ask3 = pd_Buf[1];
							_bid3 = pd_Buf[0];
							cpt3 = pd_Buf[4];
						}
						if (ph_Client[i] == ph_Client[y])
						{
							MagicNumber4 = pd_Buf[3];
							_typ4 = pd_Buf[4];
							_ask4 = pd_Buf[1];
							_bid4 = pd_Buf[0];
							cpt4 = pd_Buf[4];
						}
						close = true;
					}

					if (pd_Buf[3] != 0)
					{
						printf("\nReadFromDouble(%d...) Read Data: %9.1f\n", ph_Client[i], pd_Buf[3]);
						ss_Buf[0] = 3;
						ss_Buf[1] = 4;

						if (MagicNumber == pd_Buf[3] && ph_Client[i] != ph_Client[x])
						{
							if ((_typ == 1 && _bid<pd_Buf[1]) || (_typ == 2 && _ask>pd_Buf[0]))
							{

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[x], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[x], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[x] << "..." << ss_Buf[0] << std::endl;
									MagicNumber = 0;
									Sleep(500);
								}
							}
						}

						if (MagicNumber1 == pd_Buf[3] && ph_Client[i] != ph_Client[z])
						{
							if ((_typ1 == 1 && _bid1<pd_Buf[1]) || (_typ1 == 2 && _ask1>pd_Buf[0]))
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[z], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[z], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[z] << "..." << ss_Buf[0] << std::endl;
									MagicNumber1 = 0;
									Sleep(500);
								}
							}
						}

						if (MagicNumber2 == pd_Buf[3] && ph_Client[i] != ph_Client[q])
						{
							if ((_typ2 == 1 && _bid2<pd_Buf[1]) || (_typ2 == 2 && _ask2>pd_Buf[0]))
							{
								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[q], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[q], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[q] << "..." << ss_Buf[0] << std::endl;
									MagicNumber2 = 0;
									Sleep(500);
								}
							}
						}

						if (MagicNumber3 == pd_Buf[3] && ph_Client[i] != ph_Client[w])
						{
							if ((_typ3 == 1 && _bid3<pd_Buf[1]) || (_typ3 == 2 && _ask3>pd_Buf[0]))
							{

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[w], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[w], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[w] << "..." << ss_Buf[0] << std::endl;
									MagicNumber3 = 0;
									Sleep(500);
								}
							}
						}

						if (MagicNumber4 == pd_Buf[3] && ph_Client[i] != ph_Client[y])
						{
							if ((_typ4 == 1 && _bid4<pd_Buf[1]) || (_typ4 == 2 && _ask4>pd_Buf[0]))
							{

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[i], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[i] << "..." << ss_Buf[0] << std::endl;
								}

								u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[y], ss_Buf, ps32_ReadLen[0]);

								if (u32_Error)
								{
									printf("SendToInt(%d...) failed with error: %d\n", ph_Client[y], u32_Error);
								}
								else
								{
									std::cout << "Sent close instructions for..." << ph_Client[y] << "..." << ss_Buf[0] << std::endl;
									MagicNumber4 = 0;
									Sleep(500);
								}
							}
						}

					}

				}

			}

			if (min == false)
			{
				if (x != 25 && cpt == 0)
				{
					Bid = _bid;
					m = x;
				}
				if (_bid1 > Bid && z != 25 && cpt1 == 0)
				{
					Bid = _bid1;
					m = z;
				}
				if (_bid2 > Bid && q != 25 && cpt2 == 0)
				{
					Bid = _bid2;
					m = q;
				}
				if (_bid3 > Bid && w != 25 && cpt3 == 0)
				{
					Bid = _bid3;
					m = w;
				}
				if (_bid4 > Bid && y != 25 && cpt4 == 0)
				{
					Bid = _bid4;
					m = y;
				}

				if (x != m && x != 25 && _ask == 0 && cpt == 0)
				{
					Ask = _ask;
					k = x;
				}
				if (((_ask1 < Ask && _ask1 != 0) || Ask == 0) && z != m && z != 25 && cpt1 == 0)
				{
					Ask = _ask1;
					k = z;
				}
				if (((_ask2 < Ask && _ask2 != 0) || Ask == 0) && q != m && q != 25 && cpt2 == 0)
				{
					Ask = _ask2;
					k = q;
				}
				if (((_ask3 < Ask && _ask3 != 0) || Ask == 0) && w != m && w != 25 && cpt3 == 0)
				{
					Ask = _ask3;
					k = w;
				}
				if (((_ask4 < Ask && _ask4 != 0) || Ask == 0) && y != m && y != 25 && cpt4 == 0)
				{
					Ask = _ask4;
					k = y;
				}
			}

			end = (GetTickCount() - start) / 1000;

			if (close == true)
			{
				std::cout << "Client" << std::endl;
				std::cout << x << std::endl;
				std::cout << z << std::endl;
				std::cout << q << std::endl;
				std::cout << w << std::endl;
				std::cout << y << std::endl;
				std::cout << "Derived" << std::endl;
				std::cout << Bid << std::endl;
				std::cout << Ask << std::endl;
				std::cout << "Hold" << std::endl;
				std::cout << m << std::endl;
				std::cout << k << std::endl;
				std::cout << "Magic" << std::endl;
				std::cout << tickcount << std::endl;
				std::cout << "Bid-Ask" << std::endl;
				std::cout << _bid << std::endl;
				std::cout << _bid1 << std::endl;
				std::cout << _bid2 << std::endl;
				std::cout << _bid3 << std::endl;
				std::cout << _bid4 << std::endl;
				std::cout << _ask << std::endl;
				std::cout << _ask1 << std::endl;
				std::cout << _ask2 << std::endl;
				std::cout << _ask3 << std::endl;
				std::cout << _ask4 << std::endl;
				std::cout << "pd_4" << std::endl;
				std::cout << cpt << std::endl;
				std::cout << cpt1 << std::endl;
				std::cout << cpt2 << std::endl;
				std::cout << cpt3 << std::endl;
				std::cout << cpt4 << std::endl;
				close = false;
			}

			if (m != k && min == false && m <= ctrl && k <= ctrl && Bid != 0 && Ask != 0)
			{
				tickcount = tickcount + 1;
				ss_Buf[0] = tickcount;
				ss_Buf[1] = 1;
				std::cout << "First reading:" << ph_Client[m] << std::endl;
				std::cout << ss_Buf[1] << std::endl;

				u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[m], ss_Buf, ps32_ReadLen[0]);

				if (u32_Error)
				{
					printf("M SendToInt(%d...) failed with error: %d\n", ph_Client[m], u32_Error);
					hr = true;
				}
				else
				{
					printf("M SendToInt(%d...) sent %d int values\n", ph_Client[m], ps32_ReadLen[0]);
					std::cout << ss_Buf[1] << "Client:" << ph_Client[m] << std::endl;
					std::cout << ss_Buf[0] << "Client:" << ph_Client[m] << std::endl;
					_ask = 0;
					_ask1 = 0;
					_ask2 = 0;
					_ask3 = 0;
					_ask4 = 0;
					_bid = 0;
					_bid1 = 0;
					_bid2 = 0;
					_bid3 = 0;
					_bid4 = 0;
					if (m == x)
					{
						x = 30;
					}
					if (m == y)
					{
						y = 30;
					}
					if (m == z)
					{
						z = 30;
					}
					if (m == q)
					{
						q = 30;
					}
					if (m == w)
					{
						w = 30;
					}
				}

				ss_Buf[1] = 2;

				if (hr == false)
				{
					std::cout << "Second reading:" << ph_Client[k] << std::endl;
					u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[k], ss_Buf, ps32_ReadLen[0]);

					if (u32_Error)
					{
						printf("K SendToInt(%d...) failed with error: %d\n", ph_Client[k], u32_Error);
						min = true;
					}
					else
					{
						printf("K SendToInt(%d...) sent %d int values\n", ph_Client[k], ps32_ReadLen[0]);
						std::cout << ss_Buf[1] << "Client:" << ph_Client[k] << std::endl;
						std::cout << ss_Buf[0] << "Client:" << ph_Client[k] << std::endl;
						if (k == x)
						{
							x = 30;
						}
						if (k == y)
						{
							y = 30;
						}
						if (k == z)
						{
							z = 30;
						}
						if (k == q)
						{
							q = 30;
						}
						if (k == w)
						{
							w = 30;
						}
						Sleep(5000);
					}

				}

				if (hr == false)
				{
					if (min == false)
					{
						start = GetTickCount();
						ss_Buf[1] = 7;
					}

					if (min == true)
					{
						ss_Buf[1] = 8;
					}

					t = 0;

					while (t<2)
					{
						if (min != true && t == 0)
						{
							u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[k], ss_Buf, ps32_ReadLen[0]);

							if (u32_Error)
							{
								printf("Exit K instructions(%d...) failed with error: %d\n", ph_Client[k], u32_Error);
							}
							else
							{
								printf("Successful K exit instructions(%d...) sent %d int values\n", ph_Client[k], ps32_ReadLen[0]);
								t++;
							}
						}

						u32_Error = cNetEventsProcDLL::SendToInt(ph_Client[m], ss_Buf, ps32_ReadLen[0]);

						if (u32_Error)
						{
							printf("Exit M instructions(%d...) failed with error: %d\n", ph_Client[m], u32_Error);
						}
						else
						{
							printf("Successful M exit instructions(%d...) sent %d int values\n", ph_Client[m], ps32_ReadLen[0]);
							hr = true;
							t++;
							if (min == true)
							{
								t = 2;
							}
							Sleep(3000);
						}
					}
				}
			}
			hr = false;
			p = 0;
			Bid = 0;
			Ask = 0;
			f = 0;
			m = ctrl + 35;
			k = ctrl + 40;
			cpt = 45;
			cpt1 = 45;
			cpt2 = 45;
			cpt3 = 45;
			cpt4 = 45;
		}
	}
	system("pause");
	u32_Error = cNetEventsProcDLL::ServerClose();

	if (u32_Error)
	{
		printf("\nServerClose() failed with error: %d\n", u32_Error);
		return 1;
	}
	else
		printf("\nServerClose() fine...\n");

	Sleep(10000);
	return 0;
}

BOOL FormatIP(DWORD u32_IP, char* s8_IP)
{
	DWORD u32_Len = strlen(s8_IP);

	if (u32_Len < 15)
		return FALSE;

	BYTE* pu8_Addr = (BYTE*)&u32_IP;
	sprintf(s8_IP, "%d.%d.%d.%d", pu8_Addr[0], pu8_Addr[1], pu8_Addr[2], pu8_Addr[3]);

	return TRUE;
}
