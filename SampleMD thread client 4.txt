/*   =====================================================================

Copyright (c) 2017 by Omnesys Technologies, Inc.  All rights reserved.

Warning :
This Software Product is protected by copyright law and international
treaties.  Unauthorized use, reproduction or distribution of this
Software Product (including its documentation), or any portion of it,
may result in severe civil and criminal penalties, and will be
prosecuted to the maximum extent possible under the law.

Omnesys Technologies, Inc. will compensate individuals providing
admissible evidence of any unauthorized use, reproduction, distribution
or redistribution of this Software Product by any person, company or
organization.

This Software Product is licensed strictly in accordance with a separate
Software System License Agreement, granted by Omnesys Technologies, Inc., which
contains restrictions on use, reverse engineering, disclosure, confidentiality
and other matters.

=====================================================================   */
/*   =====================================================================
Compile/link commands for linux and darwin using R | API+.  These should
work if your pwd is the ./samples directory.  You may need to change the
name of the RApi library if you are using one of the library variants,
like R | API or R | Diamond API.

64-bit linux (2.6.32 kernel) :

g++ -O3 -DLINUX -D_REENTRANT -Wall -Wno-sign-compare -Wno-write-strings -Wpointer-arith -Winline -Wno-deprecated -fno-strict-aliasing -I../include -o SampleMD ../samples/SampleMD.cpp -L../linux-gnu-2.6.32-x86_64/lib -lRApiPlus-optimize -lOmneStreamEngine-optimize -lOmneChannel-optimize -lOmneEngine-optimize -l_api-optimize -l_apipoll-stubs-optimize -l_kit-optimize -lssl -lcrypto -L/usr/lib64 -lz -L/usr/kerberos/lib -lkrb5 -lk5crypto -lcom_err -lresolv -lm -lpthread -lrt

64-bit darwin :

g++ -O3 -DMacOS -D_REENTRANT -Wall -Wno-sign-compare -fno-strict-aliasing -Wpointer-arith -Winline -Wno-deprecated -Wno-write-strings -I../include -o ./SampleMD ../samples/SampleMD.cpp -L../darwin-10/lib -lRApiPlus-optimize -lOmneStreamEngine-optimize -lOmneChannel-optimize -lOmneEngine-optimize -l_api-optimize -l_apipoll-stubs-optimize -l_kit-optimize -lssl -lcrypto -L/usr/lib -lz -L/usr/lib -lkrb5 -lresolv -lm -lpthread

=====================================================================   */

#include "RApiPlus.h"

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <tchar.h>
#include <strsafe.h>
#include <conio.h>

#ifdef WinOS
#include <unistd.h>
#else
#include <Windows.h>
#endif

#define GOOD 0
#define BAD  1
#define BUFSIZE 512

using namespace std;
using namespace RApi;

/*   =====================================================================   */

bool g_bMdLoginComplete = false, trig = false;
double Bid = 0, Ask = 0;
char   BidBuffer[10];
char   AskBuffer[10];
int inst = 0;
LPTSTR lpszPipename = TEXT("\\\\.\\pipe\\mynamedpipe");
HANDLE sPipe, sThread;
HANDLE hHeap = GetProcessHeap();
TCHAR* pchReply = (TCHAR*)HeapAlloc(hHeap, 0, BUFSIZE * sizeof(TCHAR));

int main(int      argc,
	char * * argv,
	char * * envp);

DWORD WINAPI InstanceThread(LPVOID);

/*   =====================================================================   */
/*                         Custom class declarations                         */
/*   =====================================================================   */



/*   =====================================================================   */
/*                          class declarations                               */
/*   =====================================================================   */



/*   =====================================================================   */

class MyAdmCallbacks : public AdmCallbacks
{
public:
	MyAdmCallbacks() {};
	~MyAdmCallbacks() {};

	/*   ----------------------------------------------------------------   */

	virtual int Alert(AlertInfo * pInfo,
		void *      pContext,
		int *       aiCode);
};

class MyCallbacks : public RCallbacks
{
public:
	MyCallbacks() {};
	~MyCallbacks() {};

	/*   ----------------------------------------------------------------   */

	virtual int Alert(AlertInfo * pInfo,
		void *      pContext,
		int *       aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int AskQuote(AskInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BestAskQuote(AskInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BestBidAskQuote(BidInfo * pBid,
		AskInfo * pAsk,
		void *    pContext,
		int *     aiCode);

	virtual int BestBidQuote(BidInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BidQuote(BidInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BinaryContractList(BinaryContractListInfo * pInfo,
		void *                   pContext,
		int *                    aiCode);

	virtual int ClosePrice(ClosePriceInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int ClosingIndicator(ClosingIndicatorInfo * pInfo,
		void *                 pContext,
		int *                  aiCode);

	virtual int EndQuote(EndQuoteInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int EquityOptionStrategyList(EquityOptionStrategyListInfo * pInfo,
		void *                         pContext,
		int *                          aiCode);

	virtual int HighPrice(HighPriceInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int InstrumentByUnderlying(InstrumentByUnderlyingInfo * pInfo,
		void *                       pContext,
		int *                        aiCode);

	virtual int InstrumentSearch(InstrumentSearchInfo * pInfo,
		void *                 pContext,
		int *                  aiCode);

	virtual int LimitOrderBook(LimitOrderBookInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	virtual int LowPrice(LowPriceInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int MarketMode(MarketModeInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int OpenInterest(OpenInterestInfo * pInfo,
		void *             pContext,
		int *              aiCode);

	virtual int OpenPrice(OpenPriceInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int OpeningIndicator(OpeningIndicatorInfo * pInfo,
		void *                 pContext,
		int *                  aiCode);

	virtual int OptionList(OptionListInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int RefData(RefDataInfo * pInfo,
		void *        pContext,
		int *         aiCode);

	virtual int SettlementPrice(SettlementPriceInfo * pInfo,
		void *                pContext,
		int *                 aiCode);

	virtual int Strategy(StrategyInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int StrategyList(StrategyListInfo * pInfo,
		void *             pContext,
		int *              aiCode);

	virtual int TradeCondition(TradeInfo * pInfo,
		void *      pContext,
		int *       aiCode);

	virtual int TradePrint(TradeInfo * pInfo,
		void *      pContext,
		int *       aiCode);

	virtual int TradeReplay(TradeReplayInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int TradeRoute(TradeRouteInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int TradeRouteList(TradeRouteListInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	virtual int TradeVolume(TradeVolumeInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int Bar(BarInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BarReplay(BarReplayInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int AccountList(AccountListInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int PasswordChange(PasswordChangeInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int ExchangeList(ExchangeListInfo * pInfo,
		void *             pContext,
		int *              aiCode);

	virtual int ExecutionReplay(ExecutionReplayInfo * pInfo,
		void *                pContext,
		int *                 aiCode);

	virtual int LineUpdate(LineInfo * pInfo,
		void *     pContext,
		int *      aiCode);

	virtual int OpenOrderReplay(OrderReplayInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int OrderReplay(OrderReplayInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int PnlReplay(PnlReplayInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int PnlUpdate(PnlInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int PriceIncrUpdate(PriceIncrInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int ProductRmsList(ProductRmsListInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	virtual int SingleOrderReplay(SingleOrderReplayInfo * pInfo,
		void *                  pContext,
		int *                   aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int BustReport(OrderBustReport * pReport,
		void *            pContext,
		int *             aiCode);

	virtual int CancelReport(OrderCancelReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int FailureReport(OrderFailureReport * pReport,
		void *               pContext,
		int *                aiCode);

	virtual int FillReport(OrderFillReport * pReport,
		void *            pContext,
		int *             aiCode);

	virtual int ModifyReport(OrderModifyReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int NotCancelledReport(OrderNotCancelledReport * pReport,
		void *                    pContext,
		int *                     aiCode);

	virtual int NotModifiedReport(OrderNotModifiedReport * pReport,
		void *                   pContext,
		int *                    aiCode);

	virtual int RejectReport(OrderRejectReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int StatusReport(OrderStatusReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int TradeCorrectReport(OrderTradeCorrectReport * pReport,
		void *                    pContext,
		int *                     aiCode);

	virtual int TriggerPulledReport(OrderTriggerPulledReport * pReport,
		void *                     pContext,
		int *                      aiCode);

	virtual int TriggerReport(OrderTriggerReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int OtherReport(OrderReport * pReport,
		void *        pContext,
		int *         aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int SodUpdate(SodReport * pReport,
		void *      pContext,
		int *       aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int Quote(QuoteReport * pReport,
		void *        pContext,
		int *         aiCode);

	/*   ----------------------------------------------------------------   */

	virtual void send(double &Bid, double &Ask);

	/*   ----------------------------------------------------------------   */

private:
};

/*   =====================================================================   */
/*                          class definitions                                */
/*   =====================================================================   */

void MyCallbacks::send(double &Bid, double &Ask)
{
	trig = true;
	DWORD tym = GetTickCount();

	int j = sprintf(BidBuffer, "%.3f", Bid);
	j = sprintf(AskBuffer, "%.3f", Ask);

	if (BidBuffer != "")
	{
		pchReply = BidBuffer;
		printf("Bid value to pchReply is :\"%s\"\n", pchReply);
	}
	else
	{
		pchReply = AskBuffer;
		printf("Ask value to pchReply is :\"%s\"\n", pchReply);
	}

	tym = GetTickCount() - tym;
	printf("\nClockspeed: MyCallbacks::send function is  %d\n", tym);
}


/*   =====================================================================   */

int MyAdmCallbacks::Alert(AlertInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::AccountList(AccountListInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::PasswordChange(PasswordChangeInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::Alert(AlertInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */
	/*   Signal when the login to the market data system (ticker plant)     */
	/*   is complete.                                                       */

	if (pInfo->iAlertType == ALERT_LOGIN_COMPLETE &&
		pInfo->iConnectionId == MARKET_DATA_CONNECTION_ID)
	{
		g_bMdLoginComplete = true;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ExchangeList(ExchangeListInfo * pInfo,
	void *             pContext,
	int *              aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ExecutionReplay(ExecutionReplayInfo * pInfo,
	void *                pContext,
	int *                 aiCode)
{
	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::LineUpdate(LineInfo * pInfo,
	void *     pContext,
	int *      aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::OpenOrderReplay(OrderReplayInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::OrderReplay(OrderReplayInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::PnlReplay(PnlReplayInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::PnlUpdate(PnlInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::PriceIncrUpdate(PriceIncrInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::ProductRmsList(ProductRmsListInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::SingleOrderReplay(SingleOrderReplayInfo * pInfo,
	void *                  pContext,
	int *                   aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::BustReport(OrderBustReport * pReport,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::CancelReport(OrderCancelReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::FailureReport(OrderFailureReport * pReport,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::FillReport(OrderFillReport * pReport,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::ModifyReport(OrderModifyReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::NotCancelledReport(OrderNotCancelledReport * pReport,
	void *                    pContext,
	int *                     aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::NotModifiedReport(OrderNotModifiedReport * pReport,
	void *                   pContext,
	int *                    aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::RejectReport(OrderRejectReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::StatusReport(OrderStatusReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeCorrectReport(OrderTradeCorrectReport * pReport,
	void *                    pContext,
	int *                     aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TriggerPulledReport(OrderTriggerPulledReport * pReport,
	void *                     pContext,
	int *                      aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TriggerReport(OrderTriggerReport * pReport,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::OtherReport(OrderReport * pReport,
	void *        pContext,
	int *         aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::SodUpdate(SodReport * pReport,
	void *      pContext,
	int *       aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::Quote(QuoteReport * pReport,
	void *        pContext,
	int *         aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::AskQuote(AskInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BestAskQuote(AskInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl << "Best";
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	Ask = pInfo->dPrice;
	send(Bid, Ask);

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BestBidAskQuote(BidInfo * pBid,
	AskInfo * pAsk,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl << "Best Bid/Ask";
	if (!pBid->dump(&iIgnored))
	{
		cout << "error in pBid -> dump : " << iIgnored << endl;
	}

	if (!pAsk->dump(&iIgnored))
	{
		cout << "error in pAsk -> dump : " << iIgnored << endl;
	}

	Bid = pBid->dPrice;
	Ask = pAsk->dPrice;
	send(Bid, Ask);

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BestBidQuote(BidInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl << "Best";
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	Bid = pInfo->dPrice;
	send(Bid, Ask);

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BidQuote(BidInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BinaryContractList(BinaryContractListInfo * pInfo,
	void *                   pContext,
	int *                    aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ClosePrice(ClosePriceInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ClosingIndicator(ClosingIndicatorInfo * pInfo,
	void *                 pContext,
	int *                  aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::EndQuote(EndQuoteInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::EquityOptionStrategyList(EquityOptionStrategyListInfo * pInfo,
	void *                         pContext,
	int *                          aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::HighPrice(HighPriceInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::InstrumentByUnderlying(InstrumentByUnderlyingInfo * pInfo,
	void *                       pContext,
	int *                        aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::InstrumentSearch(InstrumentSearchInfo * pInfo,
	void *                 pContext,
	int *                  aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */
int MyCallbacks::LimitOrderBook(LimitOrderBookInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::LowPrice(LowPriceInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::MarketMode(MarketModeInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OpenInterest(OpenInterestInfo * pInfo,
	void *             pContext,
	int *              aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OpenPrice(OpenPriceInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OpeningIndicator(OpeningIndicatorInfo * pInfo,
	void *                 pContext,
	int *                  aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OptionList(OptionListInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::RefData(RefDataInfo * pInfo,
	void *        pContext,
	int *         aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::SettlementPrice(SettlementPriceInfo * pInfo,
	void *                pContext,
	int *                 aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::Strategy(StrategyInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::StrategyList(StrategyListInfo * pInfo,
	void *             pContext,
	int *              aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeCondition(TradeInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradePrint(TradeInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeReplay(TradeReplayInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeRoute(TradeRouteInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeRouteList(TradeRouteListInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeVolume(TradeVolumeInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::Bar(BarInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BarReplay(BarReplayInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int main(int      argc,
	char * * argv,
	char * * envp)
{
	char * USAGE = (char *)"SampleMD user password exchange ticker";

	REngine *        pEngine;
	MyAdmCallbacks * pAdmCallbacks;
	RCallbacks *     pCallbacks;
	REngineParams    oParams;
	LoginParams      oLoginParams;
	AskInfo *		 pInfo;
	tsNCharcb        sExchange;
	tsNCharcb        sTicker;
	char *           fake_envp[11];
	int              iFlags;
	int              iCode;
	BOOL   fConnected = FALSE;
	DWORD  dwThreadId = 0;
	HANDLE hPipe = INVALID_HANDLE_VALUE, hThread = NULL;
	int conn = 0;

	/*   ----------------------------------------------------------------   */

	if (argc < 5)
	{
		cout << USAGE << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */

	while (conn<1 || !_kbhit)
	{
		_tprintf(TEXT("\nPipe Server: Main thread awaiting client connection on %s\n"), lpszPipename);
		hPipe = CreateNamedPipe(
			lpszPipename,             // pipe name 
			PIPE_ACCESS_DUPLEX,       // read/write access 
			PIPE_TYPE_MESSAGE |       // message type pipe 
			PIPE_READMODE_MESSAGE |   // message-read mode 
			PIPE_WAIT,                // blocking mode 
			PIPE_UNLIMITED_INSTANCES, // max. instances  
			BUFSIZE,                  // output buffer size 
			BUFSIZE,                  // input buffer size 
			0,                        // client time-out 
			NULL);                    // default security attribute 

		if (hPipe == INVALID_HANDLE_VALUE)
		{
			_tprintf(TEXT("CreateNamedPipe failed, GLE=%d.\n"), GetLastError());
			return -1;
		}
		else
			sPipe = hPipe;

		// Wait for the client to connect; if it succeeds, 
		// the function returns a nonzero value. If the function
		// returns zero, GetLastError returns ERROR_PIPE_CONNECTED. 

		fConnected = ConnectNamedPipe(hPipe, NULL) ?
			TRUE : (GetLastError() == ERROR_PIPE_CONNECTED);

		if (fConnected)
		{
			printf("Client connected, creating a processing thread.\n");

			// Create a thread for this client. 
			hThread = CreateThread(
				NULL,              // no security attribute 
				0,                 // default stack size 
				InstanceThread,    // thread proc
				(LPVOID)hPipe,    // thread parameter 
				0,                 // not suspended 
				&dwThreadId);      // returns thread ID 

			if (hThread == NULL)
			{
				_tprintf(TEXT("CreateThread failed, GLE=%d.\n"), GetLastError());
				return -1;
			}
			else
			{
				conn = 1;
				sThread = hThread;
				CloseHandle(hThread);
				printf("\nRithmicApi : Thread created\n");
			}
		}
		else
			// The client could not connect, so close the pipe. 
			CloseHandle(hPipe);
	}


	try
	{
		pAdmCallbacks = new MyAdmCallbacks();
	}
	catch (OmneException& oEx)
	{
		iCode = oEx.getErrorCode();
		cout << "MyAdmCallbacks::MyAdmCallbacks() error : " << iCode << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   The following fake envp contains the settings for connecting to    */
	/*   Rithmic 01 Test.  To connect to a different instance of the        */
	/*   Rithmic trading platform, consult appropriate connection params    */
	/*   document in your download directory.                               */

	fake_envp[0] = "MML_DMN_SRVR_ADDR=rituz00100.00.rithmic.com:65000~rituz00100.00.rithmic.net:65000~rituz00100.00.theomne.net:65000~rituz00100.00.theomne.com:65000";
	fake_envp[1] = "MML_DOMAIN_NAME=rithmic_uat_dmz_domain";
	fake_envp[2] = "MML_LIC_SRVR_ADDR=rituz00100.00.rithmic.com:56000~rituz00100.00.rithmic.net:56000~rituz00100.00.theomne.net:56000~rituz00100.00.theomne.com:56000";
	fake_envp[3] = "MML_LOC_BROK_ADDR=rituz00100.00.rithmic.com:64100";
	fake_envp[4] = "MML_LOGGER_ADDR=rituz00100.00.rithmic.com:45454~rituz00100.00.rithmic.net:45454~rituz00100.00.theomne.com:45454~rituz00100.00.theomne.net:45454";
	fake_envp[5] = "MML_LOG_TYPE=log_net";

	/*   The SSL files are located in the ./<version>/etc directory         */
	/*   of the R | API package.  The settings below assume that those      */
	/*   files are in the current working directory.  Normally you should   */
	/*   specify the full path to these files.                              */
	fake_envp[6] = "MML_SSL_CLNT_AUTH_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_cert_auth_params";
	fake_envp[7] = "MML_SSL_CLNT_CERT_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_client_params";
	fake_envp[8] = "MML_SSL_CLNT_KEY_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_client_private_key";

	fake_envp[9] = "USER=andrew.kowuoche@gmail.com";
	fake_envp[10] = NULL;

	/*   ----------------------------------------------------------------   */
	/*   The following value for REngineParams::sAdmCnnctPt assumes the     */
	/*   app is connecting to the Rithmic 01 Test environment.              */
	/*   REngineParams::sAppName must be changed in order to log into the   */
	/*   Rithmic Paper Trading environment, or any production environment.  */

	oParams.sAppName.pData = "SampleMD";
	oParams.sAppName.iDataLen = (int)strlen(oParams.sAppName.pData);
	oParams.sAppVersion.pData = "1.0.0.0";
	oParams.sAppVersion.iDataLen = (int)strlen(oParams.sAppVersion.pData);
	oParams.sAdmCnnctPt.pData = "dd_admin_sslc";
	oParams.sAdmCnnctPt.iDataLen = (int)strlen(oParams.sAdmCnnctPt.pData);
	oParams.envp = fake_envp;
	oParams.pAdmCallbacks = pAdmCallbacks;
	oParams.sLogFilePath.pData = "smd.log";
	oParams.sLogFilePath.iDataLen = (int)strlen(oParams.sLogFilePath.pData);

	/*   ----------------------------------------------------------------   */

	try
	{
		pEngine = new REngine(&oParams);
	}
	catch (OmneException& oEx)
	{
		delete pAdmCallbacks;

		iCode = oEx.getErrorCode();
		cout << "REngine::REngine() error : " << iCode << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   instantiate a callback object - prerequisite for logging in */

	try
	{
		pCallbacks = new MyCallbacks();
	}
	catch (OmneException& oEx)
	{
		delete pEngine;
		delete pAdmCallbacks;

		iCode = oEx.getErrorCode();
		cout << "MyCallbacks::MyCallbacks() error : " << iCode << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   Set up parameters for logging in.  Again, the MdCnnctPt and        */
	/*   TsCnnctPt have values for Rithmic 01 Test.  Add values for other   */
	/*   members of LoginParams to log into other subsystems of the         */
	/*   infrastructure like like pnl and history.                          */

	oLoginParams.pCallbacks = pCallbacks;

	oLoginParams.sMdUser.pData = argv[1];
	oLoginParams.sMdUser.iDataLen = (int)strlen(oLoginParams.sMdUser.pData);

	oLoginParams.sMdPassword.pData = argv[2];
	oLoginParams.sMdPassword.iDataLen = (int)strlen(oLoginParams.sMdPassword.pData);

	oLoginParams.sMdCnnctPt.pData = "login_agent_tpc";
	oLoginParams.sMdCnnctPt.iDataLen = (int)strlen(oLoginParams.sMdCnnctPt.pData);

	oLoginParams.sUser.pData = argv[1];
	oLoginParams.sUser.iDataLen = (int)strlen(oLoginParams.sUser.pData);

	oLoginParams.sPassword.pData = argv[2];
	oLoginParams.sPassword.iDataLen = (int)strlen(oLoginParams.sPassword.pData);

	oLoginParams.sTsCnnctPt.pData = "login_agent_opc";
	oLoginParams.sTsCnnctPt.iDataLen = (int)strlen(oLoginParams.sTsCnnctPt.pData);

	/*   ----------------------------------------------------------------   */

	if (!pEngine->login(&oLoginParams, &iCode))
	{
		cout << "REngine::login() error : " << iCode << endl;

		delete pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   After calling REngine::login, RCallbacks::Alert may be called a    */
	/*   number of times.  Wait for when the login to the MdCnnctPt is      */
	/*   complete.  (See MyCallbacks::Alert() for details).                 */

	while (!g_bMdLoginComplete)
	{
#ifdef WinOS
		sleep(1);
#else
		Sleep(1000);
#endif
	}

	/*   ----------------------------------------------------------------   */

	sExchange.pData = argv[3];
	sExchange.iDataLen = (int)strlen(sExchange.pData);

	/*   ----------------------------------------------------------------   */

	sTicker.pData = argv[4];
	sTicker.iDataLen = (int)strlen(sTicker.pData);

	/*   ----------------------------------------------------------------   */
	/*   Subscription flags are OR'd.  Add more flags to get more data.     */

	iFlags = (MD_PRINTS | MD_BEST);

	/*   ----------------------------------------------------------------   */

	if (!pEngine->subscribe(&sExchange, &sTicker, iFlags, &iCode))
	{
		cout << "REngine::subscribe() error : " << iCode << endl;

		delete pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	/*   ----------------------------------------------------------------   */

	sExchange.pData = "CME";
	sExchange.iDataLen = (int)strlen(sExchange.pData);

	/*   ----------------------------------------------------------------   */

	sTicker.pData = "NQH8";
	sTicker.iDataLen = (int)strlen(sTicker.pData);

	/*   ----------------------------------------------------------------   */

	/*   Subscription flags are OR'd.  Add more flags to get more data.     */

	iFlags = (MD_PRINTS | MD_BEST);

	/*   ----------------------------------------------------------------   */

	if (!pEngine->subscribe(&sExchange, &sTicker, iFlags, &iCode))
	{
		cout << "REngine::subscribe() error : " << iCode << endl;

		delete pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	/*   ----------------------------------------------------------------   */

	/*   press 'enter' to quit... */

	fgetc(stdin);

	/*   ----------------------------------------------------------------   */

	delete pEngine;
	delete pCallbacks;
	delete pAdmCallbacks;


	/*   ----------------------------------------------------------------   */

	return (GOOD);
}

/*   =====================================================================   */
/*                          function declarations                            */
/*   =====================================================================   */

DWORD WINAPI InstanceThread(LPVOID lpvParam)
// This routine is a thread processing function to read from and reply to a client
// via the open pipe connection passed from the main loop. Note this allows
// the main loop to continue executing, potentially creating more threads of
// of this procedure to run concurrently, depending on the number of incoming
// client connections.
{
	DWORD cbBytesRead = 0, cbReplyBytes = 0, cbWritten = 0;
	BOOL fSuccess = FALSE;
	HANDLE hPipe = NULL;

	// Do some extra error checking since the app will keep running even if this
	// thread fails.

	if (lpvParam == NULL)
	{
		printf("\nERROR - Pipe Server Failure:\n");
		printf("   InstanceThread got an unexpected NULL value in lpvParam.\n");
		printf("   InstanceThread exitting.\n");
		if (pchReply != NULL) HeapFree(hHeap, 0, pchReply);
		return (DWORD)-1;
	}

	if (pchReply == NULL)
	{
		printf("\nERROR - Pipe Server Failure:\n");
		printf("   InstanceThread got an unexpected NULL heap allocation.\n");
		printf("   InstanceThread exitting.\n");
		return (DWORD)-1;
	}

	// Print verbose messages. In production code, this should be for debugging only.
	printf("InstanceThread created, receiving and processing messages.\n");

	// The thread's parameter is a handle to a pipe object instance. 

	hPipe = sPipe;

	// Loop until done reading
	while (1)
	{

		// Write the reply to the pipe. 
		fSuccess = WriteFile(
			hPipe,        // handle to pipe 
			pchReply,     // buffer to write from 
			cbReplyBytes, // number of bytes to write 
			&cbWritten,   // number of bytes written 
			NULL);        // not overlapped I/O 

		if (!fSuccess || cbReplyBytes != cbWritten)
		{
			_tprintf(TEXT("InstanceThread WriteFile failed, GLE=%d.\n"), GetLastError());
			break;
		}
		if (fSuccess && trig)
		{
			_tprintf(TEXT("Messgae sent from Server is : %s\n"), pchReply);
			_tprintf(TEXT("RithmicApi value is : %s\n"), BidBuffer);
		}

	}

	// Flush the pipe to allow the client to read the pipe's contents 
	// before disconnecting. Then disconnect the pipe, and close the 
	// handle to this pipe instance. 

	FlushFileBuffers(hPipe);
	DisconnectNamedPipe(hPipe);
	CloseHandle(hPipe);

	HeapFree(hHeap, 0, pchReply);

	printf("InstanceThread exitting.\n");
	return 1;
}

/*   =====================================================================   */
