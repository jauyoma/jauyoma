/*   =====================================================================

Copyright (c) 2017 by Omnesys Technologies, Inc.  All rights reserved.

Warning :
This Software Product is protected by copyright law and international
treaties.  Unauthorized use, reproduction or distribution of this
Software Product (including its documentation), or any portion of it,
may result in severe civil and criminal penalties, and will be
prosecuted to the maximum extent possible under the law.

Omnesys Technologies, Inc. will compensate individuals providing
admissible evidence of any unauthorized use, reproduction, distribution
or redistribution of this Software Product by any person, company or
organization.

This Software Product is licensed strictly in accordance with a separate
Software System License Agreement, granted by Omnesys Technologies, Inc., which
contains restrictions on use, reverse engineering, disclosure, confidentiality
and other matters.

=====================================================================   */
/*   =====================================================================
Compile/link commands for linux and darwin using R | API+.  These should
work if your pwd is the ./samples directory.  You may need to change the
name of the RApi library if you are using one of the library variants,
like R | API or R | Diamond API.

64-bit linux (2.6.32 kernel) :

g++ -O3 -DLINUX -D_REENTRANT -Wall -Wno-sign-compare -Wno-write-strings -Wpointer-arith -Winline -Wno-deprecated -fno-strict-aliasing -I../include -o SampleOrder ../samples/SampleOrder.cpp -L../linux-gnu-2.6.32-x86_64/lib -lRApiPlus-optimize -lOmneStreamEngine-optimize -lOmneChannel-optimize -lOmneEngine-optimize -l_api-optimize -l_apipoll-stubs-optimize -l_kit-optimize -lssl -lcrypto -L/usr/lib64 -lz -L/usr/kerberos/lib -lkrb5 -lk5crypto -lcom_err -lresolv -lm -lpthread -lrt

64-bit darwin :

g++ -O3 -DMacOS -D_REENTRANT -Wall -Wno-sign-compare -fno-strict-aliasing -Wpointer-arith -Winline -Wno-deprecated -Wno-write-strings -I../include -o ./SampleOrder ../samples/SampleOrder.cpp -L../darwin-10/lib -lRApiPlus-optimize -lOmneStreamEngine-optimize -lOmneChannel-optimize -lOmneEngine-optimize -l_api-optimize -l_apipoll-stubs-optimize -l_kit-optimize -lssl -lcrypto -L/usr/lib -lz -L/usr/lib -lkrb5 -lresolv -lm -lpthread

=====================================================================   */

#include "C:\Users\User\Documents\9.9.0.0\include\RApiPlus.h"
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <windows.h>
#include <fstream>
#include <sstream>


#ifdef WinOS
#include <unistd.h>
#else
#include <Windows.h>
#endif

#define GOOD 0
#define BAD  1
#define BUFSIZE 512

using namespace RApi;
using namespace std;

/*   =====================================================================   */
/*   Use global variables to share between the callback thread and main      */
/*   thread.  The booleans are a primitive method of signaling state         */
/*   between the two threads.                                                */

bool        g_bTsLoginComplete = false;
bool        g_bRcvdAccount = false;
bool        g_bRcvdPriceIncr = false;
bool        g_bRcvdTradeRoutes = false;
bool        g_bDone = false;

int         g_iToExchSsboe = 0;
int         g_iToExchUsecs = 0;
int         g_iFromExchSsboe = 0;
int         g_iFromExchUsecs = 0;

const int   g_iMAX_LEN = 256;
char        g_cAccountId[g_iMAX_LEN];
char        g_cFcmId[g_iMAX_LEN];
char        g_cIbId[g_iMAX_LEN];
char        g_cExchange[g_iMAX_LEN];
char        g_cTradeRoute[g_iMAX_LEN];
AccountInfo g_oAccount;
tsNCharcb   g_sExchange;
tsNCharcb   g_sTradeRoute = { (char *)NULL, 0 };

REngine *   g_pEngine;
MarketOrderParams oMktOrdParams;
LimitOrderParams  oLmtOrdParams;
ModifyLimitOrderParams	oModLmtOrdParams;
StopMarketOrderParams oStpMktOrdParams;

double _AvgFillPrice = 0, _AccBal = 0, _ClosedPL = 0, _Margin = 0, _OpenPL = 0, _PriceToFill = 0;
double _ClosedNQ, _ClosedES, _OpenNQ, _OpenES, incrNQ = 0, incrES = 0, _PnlAvgOpenPrice;
double _AvgFillPriceNQ = 0, _AvgFillPriceES = 0, _PriceToFillNQ = 0, _PriceToFillES = 0;
long _BuyQty = 0, _SellQty = 0, _Posn = 0;
int _AccBalConf = 0, _MarginConf = 0, _PosnConf = 0;
int _filled = 0, _unfilled = 0;
int _PnlAvgOpen, _QtyToFill = 0, _Cancelled;
tsNCharcb _type, _CompReason, _OrdDuration, _OrdType, _Ticker;
tsNCharcb _OrderNumNQ, _OrderNumES, _BOrderNumNQ, _SOrderNumNQ;
tsNCharcb _TickerNQ, _TickerES, SymbNQ, SymbES;
std::string _stypeNQ, _stypeES, _sCompReason, _sOrdDuration, _sOrdType, _sTicker;
std::string _sTickerNQ, _sTickerES, _Status;
LARGE_INTEGER StartingTime, EndingTime, ElapsedMicroseconds, Frequency;
std::string trial, test, _sExchange;
int  hr_T = 19, min_T = 36, day_T;
double spreadA, spreadB, _RiskBal;
int _qty = 1, iCode, trade, curr, track = 1;
long SpdLineUpd, SpdPnL, SpdBAsk, SpdBBid, SpdBAskBid, SpdProc, SpdClOrd;
long SpdAsk, SpdBid, SpdTrade, SpdSellFn, SpdBuyFn, SpdCloseBuyFn, SpdCloseSellFn;
long _minqty = 0, _maxqty = 0;
bool done = false, contract = false, BalMntr = false;
double NQLAsk1 = 0, NQLBid1 = 0, ESLAsk1 = 0, ESLBid1 = 0;
double NQLAsk2 = 0, NQLBid2 = 0, ESLAsk2 = 0, ESLBid2 = 0;
int NQNAsk1, NQNBid1, ESNAsk1, ESNBid1;
int NQSAsk1, NQSBid1, ESSAsk1, ESSBid1;
int NQSAsk2, NQSBid2, ESSAsk2, ESSBid2;
int BBid_T, Bid_T, BAsk_T, Ask_T;
double NQ1TP, ES1TP, _MinBal;
int NQ1BV = 0, NQ1SV = 0, ES1BV = 0, ES1SV = 0, NQ2BV, NQ2SV, ES2BV, ES2SV, NQ3BV, NQ3SV, ES3BV, ES3SV;
int NQ4BV, NQ4SV, ES4BV, ES4SV;
double Psh1, Bs1, Psh2, Bs2, Psh3, Bs3;
double Psh4, Psh5, Psh6;
double LastPrice, NQBVP, NQSVP, ESBVP, ESSVP;
bool counter = false, BvolTracker = false, SvolTracker = false, VolTracker = false, Tracker = false;
int NQBcheck = 0, Vol = 0, buycheck = 0, sellcheck = 0, buyclose = 0, sellclose = 0;
bool BuyLimit = false, SellLimit = false, OpenOrd = false, BuyMarket = false, SellMarket = false;
double NQBLmt, NQSLmt;
bool NQBCl, NQSCl, LiveOrdNQ = false;
tsNCharcb EntTyp, OrdNmb, Algo, UsrMsg;
bool SubOrd = false;
double HighBid = 0, Open = 0, LowBid, LowAsk = 0;


SYSTEMTIME st, lt;

/*   ----------------------------------------------------------------   */
/*   Function Definitions			                        */
/*   ----------------------------------------------------------------   */

BOOL ctrl_handler(DWORD event)
{
	if (event == CTRL_CLOSE_EVENT) {
		done = true;
		Sleep(20000); // force exit after 20 seconds
		return TRUE;
	}
	return FALSE;
}

int main(int      argc,
	char * * argv,
	char * * envp);

/*   =====================================================================   */
/*                          class declarations                               */
/*   =====================================================================   */

class MyAdmCallbacks : public AdmCallbacks
{
public:
	MyAdmCallbacks() {};
	~MyAdmCallbacks() {};

	/*   ----------------------------------------------------------------   */

	virtual int Alert(AlertInfo * pInfo,
		void *      pContext,
		int *       aiCode);
};

/*   =====================================================================   */

class MyCallbacks : public RCallbacks
{
public:
	MyCallbacks() {};
	~MyCallbacks() {};

	/*   ----------------------------------------------------------------   */

	virtual int Alert(AlertInfo * pInfo,
		void *      pContext,
		int *       aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int AskQuote(AskInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BestAskQuote(AskInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BestBidAskQuote(BidInfo * pBid,
		AskInfo * pAsk,
		void *    pContext,
		int *     aiCode);

	virtual int BestBidQuote(BidInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BidQuote(BidInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BinaryContractList(BinaryContractListInfo * pInfo,
		void *                   pContext,
		int *                    aiCode);

	virtual int ClosePrice(ClosePriceInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int ClosingIndicator(ClosingIndicatorInfo * pInfo,
		void *                 pContext,
		int *                  aiCode);

	virtual int EndQuote(EndQuoteInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int EquityOptionStrategyList(EquityOptionStrategyListInfo * pInfo,
		void *                         pContext,
		int *                          aiCode);

	virtual int HighBidPrice(HighBidPriceInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int HighPrice(HighPriceInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int InstrumentByUnderlying(InstrumentByUnderlyingInfo * pInfo,
		void *                       pContext,
		int *                        aiCode);

	virtual int InstrumentSearch(InstrumentSearchInfo * pInfo,
		void *                 pContext,
		int *                  aiCode);

	virtual int LimitOrderBook(LimitOrderBookInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	virtual int LowAskPrice(LowAskPriceInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int LowPrice(LowPriceInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int MarketMode(MarketModeInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int OpenInterest(OpenInterestInfo * pInfo,
		void *             pContext,
		int *              aiCode);

	virtual int OpenPrice(OpenPriceInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int OpeningIndicator(OpeningIndicatorInfo * pInfo,
		void *                 pContext,
		int *                  aiCode);

	virtual int OptionList(OptionListInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int RefData(RefDataInfo * pInfo,
		void *        pContext,
		int *         aiCode);

	virtual int SettlementPrice(SettlementPriceInfo * pInfo,
		void *                pContext,
		int *                 aiCode);

	virtual int Strategy(StrategyInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int StrategyList(StrategyListInfo * pInfo,
		void *             pContext,
		int *              aiCode);

	virtual int TradeCondition(TradeInfo * pInfo,
		void *      pContext,
		int *       aiCode);

	virtual int TradePrint(TradeInfo * pInfo,
		void *      pContext,
		int *       aiCode);

	virtual int TradeReplay(TradeReplayInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int TradeRoute(TradeRouteInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int TradeRouteList(TradeRouteListInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	virtual int TradeVolume(TradeVolumeInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int Bar(BarInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BarReplay(BarReplayInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int AccountList(AccountListInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int PasswordChange(PasswordChangeInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int ExchangeList(ExchangeListInfo * pInfo,
		void *             pContext,
		int *              aiCode);

	virtual int ExecutionReplay(ExecutionReplayInfo * pInfo,
		void *                pContext,
		int *                 aiCode);

	virtual int LineUpdate(LineInfo * pInfo,
		void *     pContext,
		int *      aiCode);

	virtual int OpenOrderReplay(OrderReplayInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int OrderReplay(OrderReplayInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int PnlReplay(PnlReplayInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int PnlUpdate(PnlInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int PriceIncrUpdate(PriceIncrInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int ProductRmsList(ProductRmsListInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	virtual int SingleOrderReplay(SingleOrderReplayInfo * pInfo,
		void *                  pContext,
		int *                   aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int BustReport(OrderBustReport * pReport,
		void *            pContext,
		int *             aiCode);

	virtual int CancelReport(OrderCancelReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int FailureReport(OrderFailureReport * pReport,
		void *               pContext,
		int *                aiCode);

	virtual int FillReport(OrderFillReport * pReport,
		void *            pContext,
		int *             aiCode);

	virtual int ModifyReport(OrderModifyReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int NotCancelledReport(OrderNotCancelledReport * pReport,
		void *                    pContext,
		int *                     aiCode);

	virtual int NotModifiedReport(OrderNotModifiedReport * pReport,
		void *                   pContext,
		int *                    aiCode);

	virtual int RejectReport(OrderRejectReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int StatusReport(OrderStatusReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int TradeCorrectReport(OrderTradeCorrectReport * pReport,
		void *                    pContext,
		int *                     aiCode);

	virtual int TriggerPulledReport(OrderTriggerPulledReport * pReport,
		void *                     pContext,
		int *                      aiCode);

	virtual int TriggerReport(OrderTriggerReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int OtherReport(OrderReport * pReport,
		void *        pContext,
		int *         aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int SodUpdate(SodReport * pReport,
		void *      pContext,
		int *       aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int Quote(QuoteReport * pReport,
		void *        pContext,
		int *         aiCode);

	/*   ----------------------------------------------------------------   */

	virtual void Process();

	/*   ----------------------------------------------------------------   */

	virtual bool SellFn();

	/*   ----------------------------------------------------------------   */

	virtual bool BuyFn();

	/*   ----------------------------------------------------------------   */

	virtual void CloseSellFn();

	/*   ----------------------------------------------------------------   */

	virtual void CloseBuyFn();

	/*   ----------------------------------------------------------------   */

private:
};

/*   =====================================================================   */
/*                          class definitions                                */
/*   =====================================================================   */

void MyCallbacks::CloseBuyFn()
{
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	if (buyclose == 1)
	{
		if (BuyMarket)
		{
			if (_Posn == 1)
			{
				std::cout << "\nTrying to close Buy Market Order\n" << endl;

				oMktOrdParams.sBuySellType.pData = "S";
				oMktOrdParams.sBuySellType.iDataLen = (int)strlen(oMktOrdParams.sBuySellType.pData);
				oMktOrdParams.sTicker.pData = SymbNQ.pData;
				oMktOrdParams.sTicker.iDataLen = (int)strlen(oMktOrdParams.sTicker.pData);

				if (g_pEngine->sendOrder(&oMktOrdParams, &iCode))
				{
					BuyMarket = false;
					_OpenNQ = 0;
					_OpenPL = 0;
					_filled == 0;
					std::cout << "\nClosed Buy Market Order" << endl;
				}
				else
					std::cout << "\nFailed to close Buy Market order due to reason code : " << iCode << endl;
			}
		}
		else if (BuyLimit)
		{
			if (g_pEngine->cancelAllOrders(&g_oAccount, &EntTyp, &Algo, &iCode))
			{
				std::cout << "\nClosed Buy Limit Order\n" << endl;
			}
		}
		buyclose = 2;
	}

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdCloseBuyFn)
		SpdCloseBuyFn = ElapsedMicroseconds.QuadPart;
}

void MyCallbacks::CloseSellFn()
{
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	if (sellclose == 1)
	{
		if (SellMarket)
		{
			if (_Posn == -1)
			{
				std::cout << "\nTrying to close Sell Market Order\n" << endl;

				oMktOrdParams.sBuySellType.pData = "B";
				oMktOrdParams.sBuySellType.iDataLen = (int)strlen(oMktOrdParams.sBuySellType.pData);
				oMktOrdParams.sTicker.pData = SymbNQ.pData;
				oMktOrdParams.sTicker.iDataLen = (int)strlen(oMktOrdParams.sTicker.pData);

				if (g_pEngine->sendOrder(&oMktOrdParams, &iCode))
				{
					SellMarket = false;
					_OpenNQ = 0;
					_OpenPL = 0;
					_filled == 0;
					std::cout << "\nClosed Sell Market Order" << endl;
				}
				else
					std::cout << "\nFailed to close Sell Market order due to reason code : " << iCode << endl;
			}
		}
		else if (SellLimit)
		{
			if (g_pEngine->cancelAllOrders(&g_oAccount, &EntTyp, &Algo, &iCode))
			{
				std::cout << "\nClosed Sell Limit Order\n" << endl;
			}
		}
		sellclose = 2;
	}

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdCloseSellFn)
		SpdCloseSellFn = ElapsedMicroseconds.QuadPart;

}

bool MyCallbacks::BuyFn()
{
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);
	
	if(Vol == 1)
		oLmtOrdParams.dPrice = HighBid + (incrNQ*1);
	else if(Vol == 2)
		oLmtOrdParams.dPrice = NQLBid1 + (incrNQ*1);
	oLmtOrdParams.sBuySellType.pData = "B";
	oLmtOrdParams.sBuySellType.iDataLen = (int)strlen(oLmtOrdParams.sBuySellType.pData);

	if (!BuyLimit)
	{
		if (buycheck == 1)
		{
			if (!g_pEngine->sendOrder(&oLmtOrdParams, &iCode))
			{
				std::cout << "\n\nBuyFn() error : " << iCode << endl;
				BuyLimit = false;
			}
			else
			{
				BuyLimit = true;
				NQBLmt = oLmtOrdParams.dPrice;
				std::cout << "\n\nBuyFn() order successfully submitted : " << NQBLmt << endl;
			}
			buycheck = 2;
		}
	}

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdBuyFn)
		SpdBuyFn = ElapsedMicroseconds.QuadPart;

	return BuyLimit;
}

bool MyCallbacks::SellFn()
{
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	if(Vol == 2)
		oLmtOrdParams.dPrice = LowAsk - (incrNQ*1);
	if(Vol == 1)
		oLmtOrdParams.dPrice = NQLAsk1 - (incrNQ*1);
	oLmtOrdParams.sBuySellType.pData = "S";
	oLmtOrdParams.sBuySellType.iDataLen = (int)strlen(oLmtOrdParams.sBuySellType.pData);

	if (!SellLimit)
	{
		if (sellcheck == 1)
		{
			if (!g_pEngine->sendOrder(&oLmtOrdParams, &iCode))
			{
				std::cout << "\n\nSellFn() error : " << iCode << endl;
				SellLimit = false;
			}
			else
			{
				SellLimit = true;
				NQSLmt = oLmtOrdParams.dPrice;
				std::cout << "\n\nSellFn() order successfully submitted : " << NQSLmt << endl;
			}
			sellcheck = 2;
		}
	}

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdSellFn)
		SpdSellFn = ElapsedMicroseconds.QuadPart;

	return SellLimit;
}

void MyCallbacks::Process()
{
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	Psh1 = NQ3BV - NQ3SV;
	Psh2 = NQ3BV + NQ3SV;
	Psh3 = Psh1 / Psh2;
	Psh4 = NQ4BV - NQ4SV;
	Psh5 = NQ4BV + NQ4SV;
	Psh6 = Psh4 / Psh5;
	Bs1 = NQSBid1 - NQSAsk1;
	Bs2 = NQSBid1 + NQSAsk1;
	Bs3 = Bs1 / Bs2;
	
	if(!SubOrd)
	{
		if((HighBid-LowAsk) < (4 * incrNQ))
		{
			HighBid = HighBid + (2*incrNQ);
			LowAsk = LowAsk - (2*incrNQ);
		}
		Open = HighBid;
		SubOrd = true;
	}
	
	if (buycheck == 2 && !BuyLimit)
		buycheck = 0;
	else if (sellcheck == 2 && !SellLimit)
		sellcheck = 0;
	if (buycheck == 0 || sellcheck == 0)
		OpenOrd = true;
	if (buyclose == 2 && !BuyLimit)
		buyclose = 0;
	else if (sellclose == 2 && !SellLimit)
		sellclose = 0;
	if (buyclose == 2 && BuyMarket)
		buyclose = 0;
	else if (sellclose == 2 && SellMarket)
		sellclose = 0;

	if (Vol == 0)
	{
		if(Open > 0)
		{
			if (NQLBid1 > Open)
			{
				Vol = 1;
				NQBVP = NQLAsk1;
				NQSVP = NQLBid1;
			}
			if (NQLBid1 < Open)
			{
				Vol = 2;
				NQBVP = NQLAsk1;
				NQSVP = NQLBid1;
			}
		}
		Tracker = true;
	}

	if (NQLAsk1 != NQLAsk2)
	{
		NQLAsk2 = NQLAsk1;
		SvolTracker = true;
	}
	else
	{
		SvolTracker = false;
	}

	if (NQLBid1 != NQLBid2)
	{
		NQLBid2 = NQLBid1;
		BvolTracker = true;
	}
	else
	{
		BvolTracker = false;
	}

	if (Vol == 1)
	{
		if (NQLBid1 > Open)
		{
			Vol = 2;
			NQBVP = NQLAsk1;
			NQSVP = NQLBid1;
			Tracker = true;
		}
	}
	else if (Vol == 2)
	{
		if (NQLBid1 < Open)
		{
			Vol = 1;
			NQBVP = NQLAsk1;
			NQSVP = NQLBid1;
			Tracker = true;
		}
	}

	if (BuyLimit)
	{
		if (buyclose == 0)
		{
			if (Vol == 2 && NQBLmt > Open)
			{
				if (g_pEngine->tryLock(&iCode) == 1)
				{
					std::cout << "\n\nTrying to close buy limit order" << endl;
					buyclose = 1;
					CloseBuyFn();
					g_pEngine->unlock(&iCode);
				}
			}
			
			if (((NQLBid1 - NQBLmt) >= (incrNQ * 1)) || ((NQBLmt - NQLBid1) >= (incrNQ * 1) && NQLAsk1 != LowAsk && Vol == 2))
			{
				if(Vol == 2)
					oModLmtOrdParams.dPrice = NQLBid1;
				if(Vol == 1)
					oModLmtOrdParams.dPrice = HighBid + (incrNQ*1);
				oModLmtOrdParams.sOrderNum = _OrderNumNQ;
				std::cout << "\n\nTrying to modify buy limit order" << endl;
				
				if (g_pEngine->modifyOrder(&oModLmtOrdParams, &iCode))
				{
					std::cout << "\n\nBuy Order modified" << endl;
				}
				else
				{
					std::cout << "\n\nBuy Order NOT modified" << endl;
				}
			}
		}
	}
	
	if (SellLimit)
	{
		if (sellclose == 0)
		{
			if (Vol == 1 && NQSLmt < Open)
			{
				if (g_pEngine->tryLock(&iCode) == 1)
				{
					std::cout << "\n\nTrying to close sell limit order is" << endl;
					sellclose = 1;
					CloseSellFn();
					g_pEngine->unlock(&iCode);
				}
			}
			
			if (((NQSLmt - NQLAsk1) >= (incrNQ * 1)) || ((NQLAsk1 - NQSLmt) >= (incrNQ * 1) && NQLBid1 != HighBid && Vol == 1))
			{
				if(Vol == 1)
					oModLmtOrdParams.dPrice = NQLAsk1;
				if(Vol == 2)
					oModLmtOrdParams.dPrice = LowAsk - (incrNQ*1);
				oModLmtOrdParams.sOrderNum = _OrderNumNQ;
				std::cout << "\n\nTrying to modify sell limit order" << endl;
				
				if (g_pEngine->modifyOrder(&oModLmtOrdParams, &iCode))
				{
					std::cout << "\n\nSell Order modified" << endl;
				}
				else
				{
					std::cout << "\n\nSell Order NOT modified" << endl;
				}
			}
		}
	}

	if (LiveOrdNQ)
	{
		LiveOrdNQ = false;
		if (BuyLimit)
		{
			if (buyclose == 2)
			{
				buyclose = 0;
			}
		}
		if (SellLimit)
		{
			if (sellclose == 2)
			{
				sellclose = 0;
			}
		}
		std::cout << "\n\nOrder cancellation rejected / failed. Trying to re-cancel" << endl;
	}

	if (BuyMarket)
	{
		if (_Posn == 1)
		{
			if (buyclose == 0)
			{
				if ((NQLBid1 < HighBid && HighBid > NQBLmt && Vol == 1) || (Bs1 < 0 && NQLBid1 <= NQBLmt && NQSBid1 < 10) || NQLBid1 < NQBLmt)
				{
					if (g_pEngine->tryLock(&iCode) == 1)
					{
						std::cout << "\n\nTrying to close buy market order" << endl;
						buyclose = 1;
						CloseBuyFn();
						g_pEngine->unlock(&iCode);
					}
				}
			}
		}
	}
	else if (SellMarket)
	{
		if (_Posn == -1)
		{
			if (sellclose == 0)
			{
				if ((NQLAsk1 > LowAsk && LowAsk < NQSLmt && Vol == 2) || (Bs1 > 0 && NQLAsk1 >= NQSLmt && NQSAsk1 < 10) || NQLAsk1 > NQSLmt)
				{
					if (g_pEngine->tryLock(&iCode) == 1)
					{
						std::cout << "\n\nTrying to close sell market order" << endl;
						sellclose = 1;
						CloseSellFn();
						g_pEngine->unlock(&iCode);
					}
				}
			}
		}
	}

	if (OpenOrd)
	{
		if (_Posn <= 1 && _Posn >= -1)
		{
			if (Vol == 1)
			{
				if (!BuyLimit)
				{
					if (!BuyMarket)
					{
						if (buycheck == 0)
						{
							if(!SellMarket || (SellMarket && NQSLmt > Open))
							{
								if (g_pEngine->tryLock(&iCode) == 1)
								{
									std::cout << "\n\nVol 1 - Opening buy limit order" << endl;
									buycheck = 1;
									BuyFn();
									g_pEngine->unlock(&iCode);
								}
							}
						}
					}
				}
				if (!SellLimit)
				{
					if (!SellMarket)
					{
						if (sellcheck == 0)
						{
							if (NQLBid1 >= HighBid || NQBcheck == 1)
							{
								NQBcheck = 1;
								if (g_pEngine->tryLock(&iCode) == 1)
								{
									std::cout << "\n\nVol 1 - Opening sell limit order" << endl;
									sellcheck = 1;
									SellFn();
									g_pEngine->unlock(&iCode);
								}
							}
						}
					}
				}
			}
			else if (Vol == 2)
			{
				if (!SellLimit)
				{
					if (!SellMarket)
					{
						if (sellcheck == 0)
						{
							if(!BuyMarket || (BuyMarket && NQBLmt < Open))
							{
								if (g_pEngine->tryLock(&iCode) == 1)
								{
									std::cout << "\n\nVol 2 - Opening sell market order" << endl;
									sellcheck = 1;
									SellFn();
									g_pEngine->unlock(&iCode);
								}
							}
						}
					}
				}
				if (!BuyLimit)
				{
					if (!BuyMarket)
					{
						if (buycheck == 0)
						{
							if (NQLAsk1 <= LowAsk || NQBcheck == 2)
							{
								NQBcheck = 2;
								if (g_pEngine->tryLock(&iCode) == 1)
								{
									std::cout << "\n\nVol 2 - Opening buy limit order" << endl;
									buycheck = 1;
									BuyFn();
									g_pEngine->unlock(&iCode);
								}
							}	
						}
					}
				}
			}
		}
		OpenOrd = false;
	}

	if (track == 1)
	{
		std::cout << "\nBuyclose value is : " << buyclose << endl;
		std::cout << "\nSellclose value is : " << sellclose << endl;
		std::cout << "\nBuycheck value is : " << buycheck << endl;
		std::cout << "\nSellcheck value is : " << sellcheck << endl;
		std::cout << "\nBuyLimit value is : " << BuyLimit << endl;
		std::cout << "\nSellLimit value is : " << SellLimit << endl;
		std::cout << "\nBuyMarket value is : " << BuyMarket << endl;
		std::cout << "\nSellMarket value is : " << SellMarket << endl;
		track = 0;
	}

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdClOrd)
		SpdClOrd = ElapsedMicroseconds.QuadPart;
	counter = false;
}


/*   =====================================================================   */

int MyAdmCallbacks::Alert(AlertInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::AccountList(AccountListInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	AccountInfo * pAccount;
	int iCode;
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */

	if (pInfo->iArrayLen > 0)
	{
		pAccount = &pInfo->asAccountInfoArray[0];

		/* copy the first account */
		if ((pAccount->sAccountId.iDataLen > g_iMAX_LEN) ||
			(pAccount->sFcmId.iDataLen     > g_iMAX_LEN) ||
			(pAccount->sIbId.iDataLen      > g_iMAX_LEN))
		{
			std::cout << "one or more of the char arrays is too small.\n" << endl;
		}
		else
		{
			memcpy(&g_cAccountId,
				pAccount->sAccountId.pData,
				pAccount->sAccountId.iDataLen);

			g_oAccount.sAccountId.pData = g_cAccountId;
			g_oAccount.sAccountId.iDataLen = pAccount->sAccountId.iDataLen;

			/*   ------------------------------------------------------   */

			memcpy(&g_cFcmId,
				pAccount->sFcmId.pData,
				pAccount->sFcmId.iDataLen);
			g_oAccount.sFcmId.pData = g_cFcmId;
			g_oAccount.sFcmId.iDataLen = pAccount->sFcmId.iDataLen;

			/*   ------------------------------------------------------   */

			memcpy(&g_cIbId,
				pAccount->sIbId.pData,
				pAccount->sIbId.iDataLen);
			g_oAccount.sIbId.pData = g_cIbId;
			g_oAccount.sIbId.iDataLen = pAccount->sIbId.iDataLen;

			if (!g_pEngine->subscribeOrder(&g_oAccount, &iCode))
			{
				std::cout << "REngine::subscribeOrder() error : %d\n" << iCode << endl;
			}

			g_bRcvdAccount = true;
		}
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::PasswordChange(PasswordChangeInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::Alert(AlertInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */
	/*   signal when the login to the trading system is complete */

	if (pInfo->iAlertType == ALERT_LOGIN_COMPLETE &&
		pInfo->iConnectionId == TRADING_SYSTEM_CONNECTION_ID)
	{
		g_bTsLoginComplete = true;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ExchangeList(ExchangeListInfo * pInfo,
	void *             pContext,
	int *              aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ExecutionReplay(ExecutionReplayInfo * pInfo,
	void *                pContext,
	int *                 aiCode)
{
	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::LineUpdate(LineInfo * pInfo,
	void *     pContext,
	int *      aiCode)
{
	tsNCharcb sOrderSentToExch = { (char *)"order sent to exch",
		(int)strlen("order sent to exch") };
	int iIgnored;
	std::string _sBuySell;
	void * pcontxt;

	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */
	/*   record when the order was sent to the exchange... */

	if (pInfo->sStatus.iDataLen == sOrderSentToExch.iDataLen &&
		memcmp(pInfo->sStatus.pData,
			sOrderSentToExch.pData,
			sOrderSentToExch.iDataLen) == 0)
	{
		g_iToExchSsboe = pInfo->iSsboe;
		g_iToExchUsecs = pInfo->iUsecs;
	}

	/*   ----------------------------------------------------------------   */
	/*   if there's a completion reason, the order is complete... */

	if (pInfo->sCompletionReason.pData)
	{
		g_bDone = true;
	}

	_filled = pInfo->iFilled;
	_unfilled = pInfo->iUnfilled;
	_CompReason = pInfo->sCompletionReason;
	_OrdDuration = pInfo->sOrderDuration;
	_OrdType = pInfo->sOrderType;
	_QtyToFill = pInfo->iQuantityToFill;
	_Cancelled = pInfo->iCancelled;

	_sCompReason = std::string(pInfo->sCompletionReason.pData, pInfo->sCompletionReason.iDataLen);
	_sOrdDuration = std::string(pInfo->sOrderDuration.pData, pInfo->sOrderDuration.iDataLen);
	_sBuySell = std::string(pInfo->sBuySellType.pData, pInfo->sBuySellType.iDataLen);
	_Status = std::string(pInfo->sStatus.pData, pInfo->sStatus.iDataLen);
	_sTicker = std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen);
	_sExchange = std::string(pInfo->sExchange.pData, pInfo->sExchange.iDataLen);

	if (_sTicker == std::string(_TickerNQ.pData, _TickerNQ.iDataLen))
	{
		EntTyp = pInfo->sEntryType;
		if (_Cancelled == 1)
		{
			if (_sBuySell == "B")
			{

			}

			if (_sBuySell == "S")
			{

			}
			_Cancelled == 0;
		}

		if (_sOrdType == "L")
		{

			if (_sBuySell == "B")
			{

			}
			if (_sBuySell == "S")
			{

			}
		}

		_sTickerNQ = std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen);
		_stypeNQ = std::string(pInfo->sBuySellType.pData, pInfo->sBuySellType.iDataLen);
		_PriceToFillNQ = pInfo->dPriceToFill;
		_AvgFillPriceNQ = pInfo->dAvgFillPrice;
		_OrderNumNQ = pInfo->sOrderNum;
	}

	if (contract)
	{
		if (_sTicker == std::string(_TickerES.pData, _TickerES.iDataLen))
		{
			_sTickerES = std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen);
			_stypeES = std::string(pInfo->sBuySellType.pData, pInfo->sBuySellType.iDataLen);
			_PriceToFillES = pInfo->dPriceToFill;
			_AvgFillPriceES = pInfo->dAvgFillPrice;
			_OrderNumES = pInfo->sOrderNum;
		}
	}

	/*   ----------------------------------------------------------------   */

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdLineUpd)
		SpdLineUpd = ElapsedMicroseconds.QuadPart;

	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::OpenOrderReplay(OrderReplayInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{


	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::OrderReplay(OrderReplayInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{

	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::PnlReplay(PnlReplayInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::PnlUpdate(PnlInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	GetLocalTime(&lt);
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	/*   ----------------------------------------------------------------   */

	_AccBalConf = pInfo->eAccountBalance;
	_MarginConf = pInfo->eAccountBalance;
	_Margin = pInfo->dMarginBalance;
	_ClosedPL = pInfo->dClosedPnl;
	_OpenPL = pInfo->dOpenPnl;
	_PnlAvgOpen = pInfo->eAvgOpenFillPrice;
	_PnlAvgOpenPrice = pInfo->dAvgOpenFillPrice;
	_PosnConf = pInfo->ePosition;


	if (!pInfo->bPossOutOfOrder)
	{
		_maxqty = pInfo->lBuyQty;
		_minqty = pInfo->lSellQty;
		_Posn = pInfo->lPosition;

		if (_Posn == 1 || _Posn == -1)
		{
			if (BuyLimit)
			{
				BuyMarket = true;
				BuyLimit = false;
				std::cout << "\n\nCurrent Buy Live Order position is : " << _Posn << endl;
			}
			if (SellLimit)
			{
				SellMarket = true;
				SellLimit = false;
				std::cout << "\n\nCurrent Sell Live Order position is : " << _Posn << endl;
			}
		}

		if ((pInfo->eAccountBalance == 2 || pInfo->eAccountBalance == 0) && pInfo->dAccountBalance > 0)
		{
			_AccBal = pInfo->dAccountBalance;
			if (!BalMntr)
			{
				if (_AccBal < _RiskBal)
					_MinBal = _AccBal * 0.999;
				BalMntr = true;
			}
		}
		if (pInfo->sTicker.pData == _TickerNQ.pData)
		{
			if ((pInfo->eOpenPnl == 2 || pInfo->eOpenPnl == 0) && pInfo->dOpenPnl > 0)
				_OpenNQ = pInfo->dOpenPnl;
		}
		else
			if ((pInfo->eOpenPnl == 2 || pInfo->eOpenPnl == 0) && pInfo->dOpenPnl > 0)
				_OpenPL = pInfo->dOpenPnl;

	}

	if (contract)
	{
		if (pInfo->sTicker.pData == _TickerES.pData)
		{
			_ClosedES = pInfo->dClosedPnl;
			_OpenES = pInfo->dOpenPnl;
		}
	}

	/*   ----------------------------------------------------------------   */

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdPnL)
		SpdPnL = ElapsedMicroseconds.QuadPart;

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::PriceIncrUpdate(PriceIncrInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	if (std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen) == std::string(_TickerNQ.pData, _TickerNQ.iDataLen))
		incrNQ = pInfo->asPriceIncrArray->dPriceIncr;
	if (contract)
	{
		if (std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen) == std::string(_TickerES.pData, _TickerES.iDataLen))
			incrES = pInfo->asPriceIncrArray->dPriceIncr;
	}

	g_bRcvdPriceIncr = true;

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::ProductRmsList(ProductRmsListInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::SingleOrderReplay(SingleOrderReplayInfo * pInfo,
	void *                  pContext,
	int *                   aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::BustReport(OrderBustReport * pReport,
	void *            pContext,
	int *             aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::CancelReport(OrderCancelReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */
	if (BuyLimit)
	{
		BuyLimit = false;
		NQBCl = false;
		std::cout << "\nClosed Buy Limit Order" << endl;
	}
	if (SellLimit)
	{
		SellLimit = false;
		NQSCl = false;
		std::cout << "\nClosed Sell Limit Order" << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::FailureReport(OrderFailureReport * pReport,
	void *               pContext,
	int *                aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */
	LiveOrdNQ = true;

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::FillReport(OrderFillReport * pReport,
	void *            pContext,
	int *             aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::ModifyReport(OrderModifyReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */
	
	std::cout << "\n\nConfirmed : Order Modified" << endl;
	
	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::NotCancelledReport(OrderNotCancelledReport * pReport,
	void *                    pContext,
	int *                     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::NotModifiedReport(OrderNotModifiedReport * pReport,
	void *                   pContext,
	int *                    aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */
	
	std::cout << "\n\nRejected : Order NOT Modified" << endl;

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::RejectReport(OrderRejectReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */
	LiveOrdNQ = true;

	/*   ----------------------------------------------------------------   */
	/*   record when the order returned from the exchange... */

	g_iFromExchSsboe = pReport->iSsboe;
	g_iFromExchUsecs = pReport->iUsecs;

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::StatusReport(OrderStatusReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */
	/*   record when the order returned from the exchange... */

	g_iFromExchSsboe = pReport->iSsboe;
	g_iFromExchUsecs = pReport->iUsecs;

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeCorrectReport(OrderTradeCorrectReport * pReport,
	void *                    pContext,
	int *                     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TriggerPulledReport(OrderTriggerPulledReport * pReport,
	void *                     pContext,
	int *                      aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TriggerReport(OrderTriggerReport * pReport,
	void *               pContext,
	int *                aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::OtherReport(OrderReport * pReport,
	void *        pContext,
	int *         aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::SodUpdate(SodReport * pReport,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::Quote(QuoteReport * pReport,
	void *        pContext,
	int *         aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::AskQuote(AskInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;
	GetSystemTime(&st);
	GetLocalTime(&lt);
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	/*   ----------------------------------------------------------------   */

	trial = std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen);

	if (trial == std::string(_TickerNQ.pData, _TickerNQ.iDataLen))
	{
		if (pInfo->bPriceFlag && pInfo->bSizeFlag)
		{
			Ask_T = pInfo->iSsboe + pInfo->iUsecs;
		}

	}

	if (contract)
	{
		if (trial == std::string(_TickerES.pData, _TickerES.iDataLen))
		{
			if (pInfo->bPriceFlag && pInfo->bSizeFlag)
			{
				Ask_T = pInfo->iSsboe + pInfo->iUsecs;
			}

		}
	}

	trial = "";

	/*   ----------------------------------------------------------------   */

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdBAsk)
		SpdAsk = ElapsedMicroseconds.QuadPart;

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BestAskQuote(AskInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{

	int iIgnored;
	GetSystemTime(&st);
	GetLocalTime(&lt);
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	/*   ----------------------------------------------------------------   */

	trial = std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen);

	if (trial == std::string(_TickerNQ.pData, _TickerNQ.iDataLen))
	{
		if (pInfo->bPriceFlag && pInfo->bSizeFlag)
		{
			NQLAsk1 = pInfo->dPrice;
			NQSAsk1 = pInfo->iSize;
			NQNAsk1 = pInfo->iNumOrders;
			BAsk_T = pInfo->iSsboe + pInfo->iUsecs;
			if(NQLAsk1 < LowAsk || LowAsk == 0)
				LowAsk = NQLAsk1;
		}
	}

	if (contract)
	{
		if (trial == std::string(_TickerES.pData, _TickerES.iDataLen))
		{
			if (pInfo->bPriceFlag && pInfo->bSizeFlag)
			{
				ESLAsk1 = pInfo->dPrice;
				ESSAsk1 = pInfo->iSize;
				ESNAsk1 = pInfo->iNumOrders;
				BAsk_T = pInfo->iSsboe + pInfo->iUsecs;
			}
		}
	}

	trial = "";

	/*   ----------------------------------------------------------------   */

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdBAsk)
		SpdBAsk = ElapsedMicroseconds.QuadPart;

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BestBidAskQuote(BidInfo * pBid,
	AskInfo * pAsk,
	void *    pContext,
	int *     aiCode)
{

	int iIgnored;
	GetSystemTime(&st);
	GetLocalTime(&lt);
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	/*   ----------------------------------------------------------------   */


	trial = std::string(pBid->sTicker.pData, pBid->sTicker.iDataLen);
	test = std::string(pAsk->sTicker.pData, pAsk->sTicker.iDataLen);

	if (test == std::string(_TickerNQ.pData, _TickerNQ.iDataLen))
	{
		if (pAsk->bPriceFlag && pAsk->bSizeFlag)
		{
			NQLAsk1 = pAsk->dPrice;
			NQSAsk1 = pAsk->iSize;
			NQNAsk1 = pAsk->iNumOrders;
			BAsk_T = pAsk->iSsboe + pAsk->iUsecs;
			if(NQLAsk1 < LowAsk || LowAsk == 0)
				LowAsk = NQLAsk1;
		}
	}

	if (trial == std::string(_TickerNQ.pData, _TickerNQ.iDataLen))
	{
		if (pBid->bPriceFlag && pBid->bSizeFlag)
		{
			NQLBid1 = pBid->dPrice;
			NQSBid1 = pBid->iSize;
			NQNBid1 = pBid->iNumOrders;
			BBid_T = pBid->iSsboe + pBid->iUsecs;
			if(NQLBid1 > HighBid)
				HighBid = NQLBid1;
		}
	}

	if (contract)
	{
		if (test == std::string(_TickerES.pData, _TickerES.iDataLen))
		{
			if (pAsk->bPriceFlag && pAsk->bSizeFlag)
			{
				ESLAsk1 = pAsk->dPrice;
				ESSAsk1 = pAsk->iSize;
				ESNAsk1 = pAsk->iNumOrders;
				BAsk_T = pBid->iSsboe + pBid->iUsecs;
			}
		}

		if (trial == std::string(_TickerES.pData, _TickerES.iDataLen))
		{
			if (pBid->bPriceFlag && pBid->bSizeFlag)
			{
				ESLBid1 = pBid->dPrice;
				ESSBid1 = pBid->iSize;
				ESNBid1 = pBid->iNumOrders;
				BBid_T = pBid->iSsboe + pBid->iUsecs;
			}
		}
	}

	trial = "";
	test = "";


	/*   ----------------------------------------------------------------   */

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdBAskBid)
		SpdBAskBid = ElapsedMicroseconds.QuadPart;

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BestBidQuote(BidInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{

	int iIgnored;
	GetSystemTime(&st);
	GetLocalTime(&lt);
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	/*   ----------------------------------------------------------------   */

	trial = std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen);

	if (trial == std::string(_TickerNQ.pData, _TickerNQ.iDataLen))
	{
		if (pInfo->bPriceFlag && pInfo->bSizeFlag)
		{
			NQLBid1 = pInfo->dPrice;
			NQSBid1 = pInfo->iSize;
			NQNBid1 = pInfo->iNumOrders;
			BBid_T = pInfo->iSsboe + pInfo->iUsecs;
			if(NQLBid1 > HighBid)
				HighBid = NQLBid1;
		}
	}

	if (contract)
	{
		if (trial == std::string(_TickerES.pData, _TickerES.iDataLen))
		{
			if (pInfo->bPriceFlag && pInfo->bSizeFlag)
			{
				ESLBid1 = pInfo->dPrice;
				ESSBid1 = pInfo->iSize;
				ESNBid1 = pInfo->iNumOrders;
				BBid_T = pInfo->iSsboe + pInfo->iUsecs;
			}
		}
	}

	trial = "";

	/*   ----------------------------------------------------------------   */

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdBBid)
		SpdBBid = ElapsedMicroseconds.QuadPart;

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BidQuote(BidInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;
	GetSystemTime(&st);
	GetLocalTime(&lt);
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	/*   ----------------------------------------------------------------   */

	trial = std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen);

	if (trial == std::string(_TickerNQ.pData, _TickerNQ.iDataLen))
	{
		if (pInfo->bPriceFlag && pInfo->bSizeFlag)
		{
			Bid_T = pInfo->iSsboe + pInfo->iUsecs;
		}
	}

	if (contract)
	{
		if (trial == std::string(_TickerES.pData, _TickerES.iDataLen))
		{
			if (pInfo->bPriceFlag && pInfo->bSizeFlag)
			{
				Bid_T = pInfo->iSsboe + pInfo->iUsecs;
			}
		}
	}

	trial = "";

	/*   ----------------------------------------------------------------   */

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdBBid)
		SpdBBid = ElapsedMicroseconds.QuadPart;

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BinaryContractList(BinaryContractListInfo * pInfo,
	void *                   pContext,
	int *                    aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ClosePrice(ClosePriceInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ClosingIndicator(ClosingIndicatorInfo * pInfo,
	void *                 pContext,
	int *                  aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::EndQuote(EndQuoteInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::EquityOptionStrategyList(EquityOptionStrategyListInfo * pInfo,
	void *                         pContext,
	int *                          aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::HighBidPrice(HighBidPriceInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	if (pInfo->bPriceFlag)
	{
		
	}


	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::HighPrice(HighPriceInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::InstrumentByUnderlying(InstrumentByUnderlyingInfo * pInfo,
	void *                       pContext,
	int *                        aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::InstrumentSearch(InstrumentSearchInfo * pInfo,
	void *                 pContext,
	int *                  aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */
int MyCallbacks::LimitOrderBook(LimitOrderBookInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::LowAskPrice(LowAskPriceInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	if (pInfo->bPriceFlag)
	{
		
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::LowPrice(LowPriceInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::MarketMode(MarketModeInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OpenInterest(OpenInterestInfo * pInfo,
	void *             pContext,
	int *              aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */


	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OpenPrice(OpenPriceInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	if (pInfo->bPriceFlag)
	{
		
	}


	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OpeningIndicator(OpeningIndicatorInfo * pInfo,
	void *                 pContext,
	int *                  aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OptionList(OptionListInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::RefData(RefDataInfo * pInfo,
	void *        pContext,
	int *         aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::SettlementPrice(SettlementPriceInfo * pInfo,
	void *                pContext,
	int *                 aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */



	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::Strategy(StrategyInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::StrategyList(StrategyListInfo * pInfo,
	void *             pContext,
	int *              aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeCondition(TradeInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */


	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradePrint(TradeInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;
	GetSystemTime(&st);
	GetLocalTime(&lt);

	/*   ----------------------------------------------------------------   */
	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	trial = std::string(pInfo->sTicker.pData, pInfo->sTicker.iDataLen);

	if (trial == std::string(_TickerNQ.pData, _TickerNQ.iDataLen))
	{
		if (pInfo->bPriceFlag)
			NQ1TP = pInfo->dPrice;
		if (pInfo->bVolumeBoughtFlag)
		{
			NQ2BV = pInfo->iVolumeBought - NQ1BV;
			if (NQ1BV > 0)
			{
				if (!BvolTracker)
					NQ4BV = NQ4BV + NQ2BV;
				else
					NQ4BV = NQ2BV;
				if(BuyMarket)
					NQ3BV = NQ3BV + NQ2BV;
				else
					NQ3BV = NQ4BV;
			}
			NQ1BV = pInfo->iVolumeBought;
		}
		if (pInfo->bVolumeSoldFlag)
		{
			NQ2SV = pInfo->iVolumeSold - NQ1SV;
			if (NQ1SV > 0)
			{
				if (!SvolTracker)
					NQ4SV = NQ4SV + NQ2SV;
				else
					NQ4SV = NQ2SV;
				if(SellMarket)
					NQ3SV = NQ3SV + NQ2SV;
				else
					NQ3SV = NQ4SV;
			}
			NQ1SV = pInfo->iVolumeSold;
		}

	}

	if (BalMntr)
	{
		if (_AccBal > _MinBal)
			Process();
		else
			std::cout << "\nMinimum trading account balance breached" << endl;
	}
	else
	{
		Process();
	}

	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

	if (ElapsedMicroseconds.QuadPart > SpdTrade)
		SpdTrade = ElapsedMicroseconds.QuadPart;

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeReplay(TradeReplayInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeRoute(TradeRouteInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeRouteList(TradeRouteListInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	printf("We are looking for a trade route for : %*.*s::%*.*s::%*.*s\n",
		g_oAccount.sFcmId.iDataLen,
		g_oAccount.sFcmId.iDataLen,
		g_oAccount.sFcmId.pData,
		g_oAccount.sIbId.iDataLen,
		g_oAccount.sIbId.iDataLen,
		g_oAccount.sIbId.pData,
		g_sExchange.iDataLen,
		g_sExchange.iDataLen,
		g_sExchange.pData);

	tsNCharcb sFcmId;
	tsNCharcb sIbId;
	tsNCharcb sExchange;
	tsNCharcb sTradeRoute;
	tsNCharcb sStatus;

	for (int i = 0; i < pInfo->iArrayLen; i++)
	{
		sFcmId = pInfo->asTradeRouteInfoArray[i].sFcmId;
		sIbId = pInfo->asTradeRouteInfoArray[i].sIbId;
		sExchange = pInfo->asTradeRouteInfoArray[i].sExchange;
		sTradeRoute = pInfo->asTradeRouteInfoArray[i].sTradeRoute;
		sStatus = pInfo->asTradeRouteInfoArray[i].sStatus;

		printf("%*.*s::%*.*s::%*.*s::%*.*s::%*.*s\n",
			sFcmId.iDataLen,
			sFcmId.iDataLen,
			sFcmId.pData,
			sIbId.iDataLen,
			sIbId.iDataLen,
			sIbId.pData,
			sExchange.iDataLen,
			sExchange.iDataLen,
			sExchange.pData,
			sTradeRoute.iDataLen,
			sTradeRoute.iDataLen,
			sTradeRoute.pData,
			sStatus.iDataLen,
			sStatus.iDataLen,
			sStatus.pData);

		/* use first trade route where fcm/ib/exch matches, and status is "UP" */
		if (g_oAccount.sFcmId.iDataLen == sFcmId.iDataLen &&
			(memcmp(g_oAccount.sFcmId.pData,
				sFcmId.pData,
				g_oAccount.sFcmId.iDataLen) == 0) &&

			g_oAccount.sIbId.iDataLen == sIbId.iDataLen &&
			(memcmp(g_oAccount.sIbId.pData,
				sIbId.pData,
				g_oAccount.sIbId.iDataLen) == 0) &&

			g_sExchange.iDataLen == sExchange.iDataLen &&
			(memcmp(g_sExchange.pData,
				sExchange.pData,
				g_sExchange.iDataLen) == 0) &&

			sTRADE_ROUTE_STATUS_UP.iDataLen == sStatus.iDataLen &&
			(memcmp(sTRADE_ROUTE_STATUS_UP.pData,
				sStatus.pData,
				sTRADE_ROUTE_STATUS_UP.iDataLen) == 0))
		{
			/*   copy memory into global trade route string */
			memcpy(&g_cTradeRoute,
				sTradeRoute.pData,
				sTradeRoute.iDataLen);

			g_sTradeRoute.pData = g_cTradeRoute;
			g_sTradeRoute.iDataLen = sTradeRoute.iDataLen;

			break;
		}

		g_sTradeRoute.pData = NULL;
		g_sTradeRoute.iDataLen = 0;
	}

	g_bRcvdTradeRoutes = true;

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeVolume(TradeVolumeInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */


	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::Bar(BarInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BarReplay(BarReplayInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	*aiCode = API_OK;
	return (OK);
}
/*   =====================================================================   */

int main(int      argc,
	char * * argv,
	char * * envp)
{
	char * USAGE = (char *)"App Name | User | Password | Balance | Day | Hour | Minute | Exchange | Ticker | Exchange2(Optional) | Ticker2(Optional)\n";

	MyAdmCallbacks *  pAdmCallbacks;
	MyCallbacks		  pMyCallbacks;
	RCallbacks *      pCallbacks;
	REngineParams     oParams;
	LoginParams       oLoginParams;
	tsNCharcb         sExchange;
	tsNCharcb         sTicker;
	char *            fake_envp[11];
	int               iFlags;
	ofstream		  myfile("RApi_Hendon.txt");
	ofstream		  livefile("RApi_Live.txt");
	ofstream		  endfile("RApi_End.txt");
	char *			  user1;
	char *			  user2;
	int 			  iUsecs;
	int				  count = 0;
	std::string		  OpenFile;
	stringstream	  strValue;



	/*   ----------------------------------------------------------------   */

	if (argc < 9 || argc == 10)
	{
		std::cout << USAGE << endl;
		return (BAD);
	}

	if (argc == 11)
		contract = true;

	GetSystemTime(&st);
	GetLocalTime(&lt);

	SetConsoleCtrlHandler((PHANDLER_ROUTINE)(ctrl_handler), TRUE);

	/*   ----------------------------------------------------------------   */

	try
	{
		pAdmCallbacks = new MyAdmCallbacks();
	}
	catch (OmneException& oEx)
	{
		iCode = oEx.getErrorCode();
		std::cout << "MyAdmCallbacks::MyAdmCallbacks() error : %d\n" << iCode << endl;
		return (BAD);
	}


	/*   ----------------------------------------------------------------   */
	/*   The following fake envp contains the settings for connecting to    */
	/*   Rithmic 01 Test.  To connect to a different instance of the        */
	/*   Rithmic trading platform, consult appropriate connection params    */
	/*   document in your download directory.                               */

	strValue << argv[4];
	strValue >> day_T;
	strValue.clear();
	strValue << argv[5];
	strValue >> hr_T;
	strValue.clear();
	strValue << argv[6];
	strValue >> min_T;
	strValue.clear();
	strValue << argv[3];
	strValue >> _RiskBal;
	strValue.clear();
	user1 = "42554PPR";
	user2 = "andrew.kowuoche@gmail.com";

	_MinBal = _RiskBal*0.999;

	if (_stricmp(argv[1], user1) == 0)
	{
		fake_envp[0] = "MML_DMN_SRVR_ADDR=ritpz01004.01.rithmic.com:65000~ritpz04063.04.rithmic.com:65000~ritpz01004.01.rithmic.net:65000~ritpz04063.04.rithmic.net:65000~ritpz01004.01.theomne.net:65000~ritpz04063.04.theomne.net:65000~ritpz01004.01.theomne.com:65000~ritpz04063.04.theomne.com:65000";
		fake_envp[1] = "MML_DOMAIN_NAME=rithmic_paper_prod_domain";
		fake_envp[2] = "MML_LIC_SRVR_ADDR=ritpz04063.04.rithmic.com:56000~ritpz01004.01.rithmic.com:56000~ritpz04063.04.rithmic.net:56000~ritpz01004.01.rithmic.net:56000~ritpz04063.04.theomne.net:56000~ritpz01004.01.theomne.net:56000~ritpz04063.04.theomne.com:56000~ritpz01004.01.theomne.com:56000";
		fake_envp[3] = "MML_LOC_BROK_ADDR=ritpz04063.04.rithmic.com:64100";
		fake_envp[4] = "MML_LOGGER_ADDR=ritpz04063.04.rithmic.com:45454~ritpz01004.01.rithmic.com:45454~ritpz04063.04.rithmic.net:45454~ritpz01004.01.rithmic.net:45454~ritpz04063.04.theomne.net:45454~ritpz01004.01.theomne.net:45454~ritpz04063.04.theomne.com:45454~ritpz01004.01.theomne.com:45454";
		fake_envp[5] = "MML_LOG_TYPE=log_net";

		/*   The SSL files are located in the ./<version>/etc directory         */
		/*   of the R | API package.  The settings below assume that those      */
		/*   files are in the current working directory.  Normally you should   */
		/*   specify the full path to these files.                              */
		fake_envp[6] = "MML_SSL_CLNT_AUTH_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_cert_auth_params";
		fake_envp[7] = "MML_SSL_CLNT_CERT_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_client_params";
		fake_envp[8] = "MML_SSL_CLNT_KEY_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_client_private_key";

		fake_envp[9] = "USER=42554PPR";
		fake_envp[10] = NULL;
	}

	if (_stricmp(argv[1], user2) == 0)
	{
		fake_envp[0] = "MML_DMN_SRVR_ADDR=rituz00100.00.rithmic.com:65000~rituz00100.00.rithmic.net:65000~rituz00100.00.theomne.net:65000~rituz00100.00.theomne.com:65000";
		fake_envp[1] = "MML_DOMAIN_NAME=rithmic_uat_dmz_domain";
		fake_envp[2] = "MML_LIC_SRVR_ADDR=rituz00100.00.rithmic.com:56000~rituz00100.00.rithmic.net:56000~rituz00100.00.theomne.net:56000~rituz00100.00.theomne.com:56000";
		fake_envp[3] = "MML_LOC_BROK_ADDR=rituz00100.00.rithmic.com:64100";
		fake_envp[4] = "MML_LOGGER_ADDR=rituz00100.00.rithmic.com:45454~rituz00100.00.rithmic.net:45454~rituz00100.00.theomne.com:45454~rituz00100.00.theomne.net:45454";
		fake_envp[5] = "MML_LOG_TYPE=log_net";

		/*   The SSL files are located in the ./<version>/etc directory         */
		/*   of the R | API package.  The settings below assume that those      */
		/*   files are in the current working directory.  Normally you should   */
		/*   specify the full path to these files.                              */
		fake_envp[6] = "MML_SSL_CLNT_AUTH_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_cert_auth_params";
		fake_envp[7] = "MML_SSL_CLNT_CERT_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_client_params";
		fake_envp[8] = "MML_SSL_CLNT_KEY_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_client_private_key";

		fake_envp[9] = "USER=andrew.kowuoche@gmail.com";
		fake_envp[10] = NULL;
	}

	/*   ----------------------------------------------------------------   */
	/*   The following value for REngineParams::sAdmCnnctPt assumes the     */
	/*   app is connecting to the Rithmic 01 Test environment.              */
	/*   REngineParams::sAppName must be changed in order to log into the   */
	/*   Rithmic Paper Trading environment, or any production environment.  */

	oParams.sAppName.pData = "anko:Hendon";
	oParams.sAppName.iDataLen = (int)strlen(oParams.sAppName.pData);
	oParams.sAppVersion.pData = "1.0.0.0";
	oParams.sAppVersion.iDataLen = (int)strlen(oParams.sAppVersion.pData);
	oParams.sAdmCnnctPt.pData = "dd_admin_sslc";
	oParams.sAdmCnnctPt.iDataLen = (int)strlen(oParams.sAdmCnnctPt.pData);
	oParams.envp = fake_envp;
	oParams.pAdmCallbacks = pAdmCallbacks;
	oParams.sLogFilePath.pData = "so.log";
	oParams.sLogFilePath.iDataLen = (int)strlen(oParams.sLogFilePath.pData);

	/*   ----------------------------------------------------------------   */

	try
	{
		g_pEngine = new REngine(&oParams);
	}
	catch (OmneException& oEx)
	{
		delete pAdmCallbacks;

		iCode = oEx.getErrorCode();
		std::cout << "REngine::REngine() error : %d\n" << iCode << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   instantiate a callback object - prerequisite for logging in */
	try
	{
		pCallbacks = new MyCallbacks();
	}
	catch (OmneException& oEx)
	{
		delete g_pEngine;
		delete pAdmCallbacks;

		iCode = oEx.getErrorCode();
		std::cout << "MyCallbacks::MyCallbacks() error : %d\n" << iCode << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   Set up parameters for logging in.  Again, the MdCnnctPt and        */
	/*   TsCnnctPt have values for Rithmic 01 Test.  Add values for other   */
	/*   members of LoginParams to log into other subsystems of the         */
	/*   infrastructure like like pnl and history.                          */

	oLoginParams.pCallbacks = pCallbacks;

	oLoginParams.sMdUser.pData = argv[1];
	oLoginParams.sMdUser.iDataLen = (int)strlen(oLoginParams.sMdUser.pData);

	oLoginParams.sMdPassword.pData = argv[2];
	oLoginParams.sMdPassword.iDataLen = (int)strlen(oLoginParams.sMdPassword.pData);

	oLoginParams.sUser.pData = argv[1];
	oLoginParams.sUser.iDataLen = (int)strlen(oLoginParams.sUser.pData);

	oLoginParams.sPassword.pData = argv[2];
	oLoginParams.sPassword.iDataLen = (int)strlen(oLoginParams.sPassword.pData);

	if (_stricmp(argv[1], user1) == 0)
	{
		oLoginParams.sTsCnnctPt.pData = "login_agent_op_paperc";
		oLoginParams.sTsCnnctPt.iDataLen = (int)strlen(oLoginParams.sTsCnnctPt.pData);

		oLoginParams.sPnlCnnctPt.pData = "login_agent_pnl_paperc";
		oLoginParams.sPnlCnnctPt.iDataLen = (int)strlen(oLoginParams.sPnlCnnctPt.pData);

		oLoginParams.sMdCnnctPt.pData = "login_agent_tp_paperc";
		oLoginParams.sMdCnnctPt.iDataLen = (int)strlen(oLoginParams.sMdCnnctPt.pData);
	}

	if (_stricmp(argv[1], user2) == 0)
	{
		oLoginParams.sTsCnnctPt.pData = "login_agent_opc";
		oLoginParams.sTsCnnctPt.iDataLen = (int)strlen(oLoginParams.sTsCnnctPt.pData);

		oLoginParams.sPnlCnnctPt.pData = "login_agent_pnlc";
		oLoginParams.sPnlCnnctPt.iDataLen = (int)strlen(oLoginParams.sPnlCnnctPt.pData);

		oLoginParams.sMdCnnctPt.pData = "login_agent_tpc";
		oLoginParams.sMdCnnctPt.iDataLen = (int)strlen(oLoginParams.sMdCnnctPt.pData);
	}

	/*   ----------------------------------------------------------------   */

	if (!g_pEngine->login(&oLoginParams, &iCode))
	{
		std::cout << "REngine::login() error : %d\n" << iCode << endl;

		delete g_pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   After calling REngine::login, RCallbacks::Alert will be called a   */
	/*   number of times.  Wait for when the login to the TsCnnctPt is      */
	/*   complete.  (See MyCallbacks::Alert() for details).                 */

	while (!g_bTsLoginComplete)
	{
#ifdef WinOS
		sleep(1);
#else
		Sleep(1000);
#endif
	}

	SymbNQ.pData = argv[8];
	SymbNQ.iDataLen = (int)strlen(SymbNQ.pData);
	_TickerNQ.pData = argv[8];
	_TickerNQ.iDataLen = (int)strlen(_TickerNQ.pData);
	if (contract)
	{
		SymbES.pData = argv[10];
		SymbES.iDataLen = (int)strlen(SymbES.pData);
		_TickerES.pData = argv[10];
		_TickerES.iDataLen = (int)strlen(_TickerES.pData);
	}

	/*   ----------------------------------------------------------------   */
	/*   Once logged in, we request price increment info for the instrument */
	/*   that we want to trade.  This call will return price increment      */
	/*   information as well as set up internal instrument-specific data.   */

	sExchange.pData = argv[7];
	sExchange.iDataLen = (int)strlen(sExchange.pData);
	sTicker.pData = argv[8];
	sTicker.iDataLen = (int)strlen(sTicker.pData);

	/*   ----------------------------------------------------------------   */
	/*   Subscription flags are OR'd.  Add more flags to get more data.     */

	iFlags = (MD_QUOTES | MD_BEST | MD_PRINTS | MD_HIGH_BID_LOW_ASK | MD_OPEN);

	/*   ----------------------------------------------------------------   */

	/*   ----------------------------------------------------------------   */

	if (!g_pEngine->subscribe(&sExchange, &sTicker, iFlags, &iCode))
	{
		std::cout << "\nREngine::subscribe() error : " << iCode << endl;

		delete g_pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	if (!g_pEngine->getPriceIncrInfo(&sExchange, &sTicker, &iCode))
	{
		std::cout << "REngine::getPriceIncrInfo() error : %d\n" << iCode << endl;

		delete g_pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	/*   ----------------------------------------------------------------   */

	if (contract)
	{
		sExchange.pData = argv[9];
		sExchange.iDataLen = (int)strlen(sExchange.pData);

		/*   ----------------------------------------------------------------   */

		sTicker.pData = argv[10];
		sTicker.iDataLen = (int)strlen(sTicker.pData);

		/*   ----------------------------------------------------------------   */

		/*   Subscription flags are OR'd.  Add more flags to get more data.     */

		iFlags = (MD_QUOTES | MD_BEST | MD_PRINTS | MD_OPEN);

		/*   ----------------------------------------------------------------   */

		if (!g_pEngine->subscribe(&sExchange, &sTicker, iFlags, &iCode))
		{
			std::cout << "\nREngine::subscribe() error : " << iCode << endl;

			delete g_pEngine;
			delete pCallbacks;
			delete pAdmCallbacks;

			return (BAD);
		}

		if (!g_pEngine->getPriceIncrInfo(&sExchange, &sTicker, &iCode))
		{
			std::cout << "REngine::getPriceIncrInfo() error : %d\n" << iCode << endl;

			delete g_pEngine;
			delete pCallbacks;
			delete pAdmCallbacks;

			return (BAD);
		}
	}

	/*   ----------------------------------------------------------------   */
	/*   Use the global boolean as the signaller of when the callback has   */
	/*   been fired (and our internal instrument-specific data is ready.)   */

	while (!g_bRcvdPriceIncr)
	{
#ifdef WinOS
		sleep(1);
#else
		Sleep(1000);
#endif
	}

	/*   ----------------------------------------------------------------   */
	/*   Placing an order requires a trade route to be specified.  Based    */
	/*   on your FCM and/or IB, you may have zero to many trade routes      */
	/*   for a given exchange.  Store the exchange where the callback can   */
	/*   see it, and then request the list.                                 */

	memcpy(&g_cExchange,
		sExchange.pData,
		sExchange.iDataLen);

	g_sExchange.pData = g_cExchange;
	g_sExchange.iDataLen = sExchange.iDataLen;

	/*   ----------------------------------------------------------------   */

	if (!g_pEngine->listTradeRoutes(NULL, &iCode))
	{
		std::cout << "REngine::listTradeRoutes() error : %d\n" << iCode << endl;

		delete g_pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	while (!g_bRcvdTradeRoutes)
	{
#ifdef WinOS
		sleep(1);
#else
		Sleep(1000);
#endif
	}

	if (g_sTradeRoute.iDataLen == 0)
	{
		printf("No available trade routes for : %*.*s::%*.*s::%*.*s\n",
			g_oAccount.sFcmId.iDataLen,
			g_oAccount.sFcmId.iDataLen,
			g_oAccount.sFcmId.pData,
			g_oAccount.sIbId.iDataLen,
			g_oAccount.sIbId.iDataLen,
			g_oAccount.sIbId.pData,
			g_sExchange.iDataLen,
			g_sExchange.iDataLen,
			g_sExchange.pData);

		delete g_pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	if (!g_pEngine->subscribePnl(&g_oAccount, &iCode))
	{
		std::cout << "REngine::subscribePnL() error : %d\n" << iCode << endl;

		delete g_pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   send market order */

	oMktOrdParams.sExchange = sExchange;
	oMktOrdParams.pAccount = &g_oAccount;
	oMktOrdParams.iQty = _qty;
	oMktOrdParams.sEntryType = sORDER_ENTRY_TYPE_MANUAL;
	oMktOrdParams.sTradeRoute = g_sTradeRoute;
	oMktOrdParams.sDuration = sORDER_DURATION_GTC;

	/*   ----------------------------------------------------------------   */
	/*   send limit order */

	oLmtOrdParams.sExchange = sExchange;
	oLmtOrdParams.sTicker = sTicker;
	oLmtOrdParams.pAccount = &g_oAccount;
	oLmtOrdParams.iQty = _qty;
	oLmtOrdParams.sDuration = sORDER_DURATION_GTC;
	oLmtOrdParams.sEntryType = sORDER_ENTRY_TYPE_MANUAL;
	oLmtOrdParams.sTradeRoute = g_sTradeRoute;
	
	/*   ----------------------------------------------------------------   */
	/*   send modify order */

	oModLmtOrdParams.sExchange = sExchange;
	oModLmtOrdParams.sTicker = sTicker;
	oModLmtOrdParams.pAccount = &g_oAccount;
	oModLmtOrdParams.iQty = _qty;
	oModLmtOrdParams.sEntryType = sORDER_ENTRY_TYPE_MANUAL;

	/*   ----------------------------------------------------------------   */
	/*   A number of Order*Report and LineInfo callbacks will be fired.     */
	/*   Wait for the order to complete (see MyCallbacks::LineUpdate()      */
	/*   for details.                                                       */

	iUsecs = ((g_iFromExchSsboe - g_iToExchSsboe) * 1000 * 1000) +
		(g_iFromExchUsecs - g_iToExchUsecs);
	std::cout << "\nDay Value is : " << day_T << endl;
	std::cout << "\nHour Value is : " << hr_T << endl;
	std::cout << "\nMinute Value is : " << min_T << endl;

	trade = (hr_T * 60) + min_T;
	curr = (lt.wHour * 60) + lt.wMinute;

	while ((((trade - curr) > 5) || day_T != lt.wDay) && !done)
	{
		long Slp_T;

		curr = (lt.wHour * 60) + lt.wMinute;
		Slp_T = ((trade - curr) - 4) * 60000;
		if (day_T != lt.wDay)
		{
			Slp_T = (((24 - lt.wHour) * 60 + (60 - lt.wMinute)) * 60000) + 60000;
			std::cout << "\nTrading will take place tomorrow..." << endl;
			std::cout << "\nLocal day Value is : " << lt.wDay << endl;
		}

		if (Slp_T > 5)
		{
			std::cout << "\nSleep time is : " << Slp_T << endl;
			Sleep(Slp_T);
		}
	}

	std::cout << "\nStarting Account Balance is : " << _RiskBal << endl;
	std::cout << "\nReading algorithm..." << endl;

	curr = (lt.wHour * 60) + lt.wMinute;
	int cnt = 0, monitor, cutoff;
	monitor = lt.wMinute;
	if ((monitor + 5) >= 60)
		cutoff = (monitor + 5) - 60;
	else
		cutoff = monitor + 5;

	while (((curr - trade) <= 5) && !done)
	{
		QueryPerformanceFrequency(&Frequency);
		QueryPerformanceCounter(&StartingTime);



		if (lt.wHour > hr_T)
			curr = (60 + lt.wMinute) - min_T;
		else
			curr = (lt.wHour * 60) + lt.wMinute;

		if ((lt.wMinute > (min_T + 2) && lt.wHour == hr_T) || (lt.wHour > hr_T))
		{
			std::cout << "\n\nExiting algobox..." << endl;
			break;
		}

		QueryPerformanceCounter(&EndingTime);
		ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
		ElapsedMicroseconds.QuadPart *= 1000000;
		ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;

		if (ElapsedMicroseconds.QuadPart > SpdProc)
			SpdProc = ElapsedMicroseconds.QuadPart;


		if (Tracker)
		{
			std::cout << "\n\nOrder Book Information..." << endl;
			std::cout << "\nLevel 1 Ask Price is : " << NQLAsk1 << endl;
			std::cout << "\nLevel 1 Ask Size is : " << NQSAsk1 << endl;
			std::cout << "\nLevel 1 Bid Price is : " << NQLBid1 << endl;
			std::cout << "\nLevel 1 Bid Size is : " << NQSBid1 << endl;
			std::cout << "\n\nAccumulated Market Buy volume is : " << NQ4BV << endl;
			std::cout << "\nAccumulated Market Sell volume is : " << NQ4SV << endl;
			std::cout << "\nNew Market Buy volume is : " << NQ2BV << endl;
			std::cout << "\nNew Market Sell volume is : " << NQ2SV << endl;
			std::cout << "\nMarket Buy volume is : " << NQ1BV << endl;
			std::cout << "\nMarket Sell volume is : " << NQ1SV << endl;
			std::cout << "\n\nTracked Market Buy volume is : " << NQ3BV << endl;
			std::cout << "\nTracked Market Sell volume is : " << NQ3SV << endl;
			std::cout << "\nTracked Market Buy pivot price is : " << NQBVP << endl;
			std::cout << "\nTracked Market Sell pivot price is : " << NQSVP << endl;
			std::cout << "\nLast traded Price (Trade Print) for NQ is : " << NQ1TP << endl;
			std::cout << "\nCurrent trend is : " << Vol << endl;
			Tracker = false;
			track = 1;
		}
	}

	/*   ----------------------------------------------------------------   */
	/*   The order is complete.  Clean up and exit.                         */
	/*   ----------------------------------------------------------------   */

	if (myfile.is_open())
	{
		myfile << "\n\nHendon Black Box Metrics" << endl;
		myfile << "Price to fill is  : " << _PriceToFill << endl;
		myfile << "NQ Average Fill Price is  : " << _AvgFillPriceNQ << endl;
		myfile << "ES Average Fill Price is  : " << _AvgFillPriceES << endl;
		myfile << "Account Balance is  : " << _AccBal << endl;

		myfile.close();
		std::cout << "\n\nWritten text file CLS = 1..." << endl;
	}

	std::cout << "\n\nWhile loop Processing speed is : " << SpdProc << endl;
	std::cout << "\n\Line update Processing speed is : " << SpdLineUpd << endl;
	std::cout << "\n\PnL Processing speed is : " << SpdPnL << endl;
	std::cout << "\n\Best Ask Processing speed is : " << SpdBAsk << endl;
	std::cout << "\n\Best Bid Processing speed is : " << SpdBBid << endl;
	std::cout << "\n\Best Ask & Bid Processing speed is : " << SpdBAskBid << endl;
	std::cout << "\n\Trade print Processing speed is : " << SpdTrade << endl;
	std::cout << "\n\Ask Processing speed is : " << SpdAsk << endl;
	std::cout << "\n\Bid Processing speed is : " << SpdBid << endl;
	std::cout << "\n\Function Processing speed is : " << SpdClOrd << endl;
	std::cout << "\n\Buy function processing speed is : " << SpdBuyFn << endl;
	std::cout << "\n\Sell Function Processing speed is : " << SpdSellFn << endl;
	std::cout << "\n\Close Buy function processing speed is : " << SpdCloseBuyFn << endl;
	std::cout << "\n\Close Sell Function Processing speed is : " << SpdCloseSellFn << endl;
	std::cout << "\n\nClosing Black Box..." << endl;

	delete g_pEngine;
	delete pCallbacks;
	delete pAdmCallbacks;

	return (GOOD);

	/*   ----------------------------------------------------------------   */

}
