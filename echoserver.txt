//+---------------------------------------------------------------------------+
//|                                            EchoServer.cpp                 |
//|                      Copyright Â© 2012, http://www.mql4.com/ru/users/more  |
//|                                       tradertobe@gmail.com                |
//+---------------------------------------------------------------------------+

#include <windows.h> 
#include <stdio.h> 
#include <tchar.h>
#include <strsafe.h>

#define BUFSIZE 512

DWORD WINAPI InstanceThread(LPVOID); 
VOID GetAnswerToRequest(LPTSTR, LPTSTR, LPDWORD);

void OpenMT4Server()
{
	int s32_Port = 2000;
	u32_Error = cNetEventsProcDLL::ServerOpen(s32_Port);

	if (u32_Error)
	{
		std::cout << "\nServerOpen() failed with error...:"<< u32_Error << std::endl;
	}
	else
	std::cout << "\nServerOpen() fine, we now are waiting for connections...\n" << std::endl;
}

int GetConnections()
{
	DWORD u32_CountOld = 0;
	int ps32_ClientIP[15];
	int ps32_ClientCount[1];

	u32_Error = cNetEventsProcDLL::GetAllConnections(ph_Client, ps32_ClientIP, ps32_ClientCount);

	if (u32_Error)
	{
		std::cout << "\nGetAllConnections(...) failed with error...:" << u32_Error << std::endl;
	}
	else
		u32_Count = ps32_ClientCount[0];

	if (u32_Count != u32_CountOld)
	{
		u32_CountOld = u32_Count;
		std::cout << "\nNumber of connections now =" << u32_Count << std::endl;
		printf("#     h_Connect   (peer IP)\n");

		for (DWORD i = 0; i < u32_Count; i++)
		{
			char  s8_IP[20];

			sprintf(s8_IP, "%s", "123456789012345");

			FormatIP(ps32_ClientIP[i], s8_IP);

			printf("%d      %d       (%s)\n", i, ph_Client[i], s8_IP);
		}
	}
	return(u32_Count);
}

void CloseMT4Server()
{
	u32_Error = cNetEventsProcDLL::ServerClose();

	if (u32_Error)
	{
		std::cout << "\nServerClose() failed with error:" << std::endl;
	}
	else
	std::cout << "\nServerClose() fine...\n" << std::endl;
}

int main()
{
	BOOL   fConnected = FALSE; 
   DWORD  dwThreadId = 0; 
   HANDLE hPipe = INVALID_HANDLE_VALUE, hThread = NULL; 
   LPTSTR lpszPipename = TEXT("\\\\.\\pipe\\pipeMaster"); 
   
   for (;;) 
   { 
      _tprintf( TEXT("\nPipe Server: Main thread awaiting client connection on %s\n"), lpszPipename);
      hPipe = CreateNamedPipe( 
          lpszPipename,             // pipe name 
          PIPE_ACCESS_DUPLEX,       // read/write access 
          PIPE_TYPE_MESSAGE |       // message type pipe 
          PIPE_READMODE_MESSAGE |   // message-read mode 
          PIPE_WAIT,                // blocking mode 
          PIPE_UNLIMITED_INSTANCES, // max. instances  
          BUFSIZE,                  // output buffer size 
          BUFSIZE,                  // input buffer size 
          0,                        // client time-out 
          NULL);                    // default security attribute 

      if (hPipe == INVALID_HANDLE_VALUE) 
      {
          _tprintf(TEXT("CreateNamedPipe failed, GLE=%d.\n"), GetLastError()); 
          return -1;
      } 
 
      fConnected = ConnectNamedPipe(hPipe, NULL) ? TRUE : (GetLastError() == ERROR_PIPE_CONNECTED); 
 
      if (fConnected) 
      { 
         printf("Client connected, creating a processing thread.\n"); 

         hThread = CreateThread( 
            NULL,              // no security attribute 
            0,                 // default stack size 
            InstanceThread,    // thread proc
            (LPVOID) hPipe,    // thread parameter 
            0,                 // not suspended 
            &dwThreadId);      // returns thread ID 

         if (hThread == NULL) 
         {
            _tprintf(TEXT("CreateThread failed, GLE=%d.\n"), GetLastError()); 
            return -1;
         }
         else CloseHandle(hThread); 
       } 
      else 
      CloseHandle(hPipe); 
   } 
   return (0);
}

BOOL FormatIP(DWORD u32_IP, char* s8_IP)
{
	DWORD u32_Len = strlen(s8_IP);

	if (u32_Len < 15)
		return FALSE;

	BYTE* pu8_Addr = (BYTE*)&u32_IP;
	sprintf(s8_IP, "%d.%d.%d.%d", pu8_Addr[0], pu8_Addr[1], pu8_Addr[2], pu8_Addr[3]);

	return TRUE;
}
