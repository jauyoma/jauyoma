//+---------------------------------------------------------------------------+
//|                                            EchoServer.cpp                 |
//|                      Copyright © 2012, http://www.mql4.com/ru/users/more  |
//|                                       tradertobe@gmail.com                |
//+---------------------------------------------------------------------------+

#include <winsock2.h>
#pragma comment(lib, "NetEventsProcDLL") // NetEventsProcDLL.lib placed in ...\FastStart\EchoServer\ 
#include <iostream>
#include <conio.h>
#include  "C:\Users\User\Documents\forex\Trader\FastStart\EchoServer\cNetEventsProcDLL.h"

BOOL FormatIP(DWORD u32_IP, char* s8_IP);
DWORD u32_Count = 0;
DWORD u32_Error;
int ph_Client[15];

void OpenMT4Server()
{
	int s32_Port = 2000;
	u32_Error = cNetEventsProcDLL::ServerOpen(s32_Port);

	if (u32_Error)
	{
		std::cout << "\nServerOpen() failed with error...:"<< u32_Error << std::endl;
	}
	else
	std::cout << "\nServerOpen() fine, we now are waiting for connections...\n" << std::endl;
}

int GetConnections()
{
	DWORD u32_CountOld = 0;
	int ps32_ClientIP[15];
	int ps32_ClientCount[1];

	u32_Error = cNetEventsProcDLL::GetAllConnections(ph_Client, ps32_ClientIP, ps32_ClientCount);

	if (u32_Error)
	{
		std::cout << "\nGetAllConnections(...) failed with error...:" << u32_Error << std::endl;
	}
	else
		u32_Count = ps32_ClientCount[0];

	if (u32_Count != u32_CountOld)
	{
		u32_CountOld = u32_Count;
		std::cout << "\nNumber of connections now =" << u32_Count << std::endl;
		printf("#     h_Connect   (peer IP)\n");

		for (DWORD i = 0; i < u32_Count; i++)
		{
			char  s8_IP[20];

			sprintf(s8_IP, "%s", "123456789012345");

			FormatIP(ps32_ClientIP[i], s8_IP);

			printf("%d      %d       (%s)\n", i, ph_Client[i], s8_IP);
		}
	}
	return(u32_Count);
}

void CloseMT4Server()
{
	u32_Error = cNetEventsProcDLL::ServerClose();

	if (u32_Error)
	{
		std::cout << "\nServerClose() failed with error:" << std::endl;
	}
	else
	std::cout << "\nServerClose() fine...\n" << std::endl;
}

int main()
{
	double pd_Buf[16];
	DWORD  u32_BufLen = 16;
	int    ps32_ReadLen[2];
	int send = 1;

			for (DWORD i = 0; i<u32_Count; i++)
			{
				pd_Buf[0] = 0;
				u32_Error = cNetEventsProcDLL::ReadFromDouble(ph_Client[i], pd_Buf, u32_BufLen, ps32_ReadLen);

				if (!u32_Error)
				{
					if (pd_Buf[0] == 1.1)
					{
						pd_Buf[1] = Bid;
						pd_Buf[2] = Ask;

						u32_Error = cNetEventsProcDLL::SendToDouble(ph_Client[i], pd_Buf, ps32_ReadLen[0]);

						if (u32_Error)
						{
							std::cout << "Failed to send; Get all connections..." << std::endl;
							send = 0;
						}
						else
						{
							std::cout << "Sent To..." << ph_Client[i] << "...Ok" << std::endl;
						}
					}

				}
				else
				{
					std::cout << "Failed to read; Get all connections..." << std::endl;
					send = 0;
				}

			}

	return (0);
}

BOOL FormatIP(DWORD u32_IP, char* s8_IP)
{
	DWORD u32_Len = strlen(s8_IP);

	if (u32_Len < 15)
		return FALSE;

	BYTE* pu8_Addr = (BYTE*)&u32_IP;
	sprintf(s8_IP, "%d.%d.%d.%d", pu8_Addr[0], pu8_Addr[1], pu8_Addr[2], pu8_Addr[3]);

	return TRUE;
}