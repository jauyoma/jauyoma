/*   =====================================================================

Copyright (c) 2017 by Omnesys Technologies, Inc.  All rights reserved.

Warning :
This Software Product is protected by copyright law and international
treaties.  Unauthorized use, reproduction or distribution of this
Software Product (including its documentation), or any portion of it,
may result in severe civil and criminal penalties, and will be
prosecuted to the maximum extent possible under the law.

Omnesys Technologies, Inc. will compensate individuals providing
admissible evidence of any unauthorized use, reproduction, distribution
or redistribution of this Software Product by any person, company or
organization.

This Software Product is licensed strictly in accordance with a separate
Software System License Agreement, granted by Omnesys Technologies, Inc., which
contains restrictions on use, reverse engineering, disclosure, confidentiality
and other matters.

=====================================================================   */
/*   =====================================================================
Compile/link commands for linux and darwin using R | API+.  These should
work if your pwd is the ./samples directory.  You may need to change the
name of the RApi library if you are using one of the library variants,
like R | API or R | Diamond API.

64-bit linux (2.6.32 kernel) :

g++ -O3 -DLINUX -D_REENTRANT -Wall -Wno-sign-compare -Wno-write-strings -Wpointer-arith -Winline -Wno-deprecated -fno-strict-aliasing -I../include -o SampleMD ../samples/SampleMD.cpp -L../linux-gnu-2.6.32-x86_64/lib -lRApiPlus-optimize -lOmneStreamEngine-optimize -lOmneChannel-optimize -lOmneEngine-optimize -l_api-optimize -l_apipoll-stubs-optimize -l_kit-optimize -lssl -lcrypto -L/usr/lib64 -lz -L/usr/kerberos/lib -lkrb5 -lk5crypto -lcom_err -lresolv -lm -lpthread -lrt

64-bit darwin :

g++ -O3 -DMacOS -D_REENTRANT -Wall -Wno-sign-compare -fno-strict-aliasing -Wpointer-arith -Winline -Wno-deprecated -Wno-write-strings -I../include -o ./SampleMD ../samples/SampleMD.cpp -L../darwin-10/lib -lRApiPlus-optimize -lOmneStreamEngine-optimize -lOmneChannel-optimize -lOmneEngine-optimize -l_api-optimize -l_apipoll-stubs-optimize -l_kit-optimize -lssl -lcrypto -L/usr/lib -lz -L/usr/lib -lkrb5 -lresolv -lm -lpthread

=====================================================================   */

#include "C:\Users\User\Documents\9.9.0.0\include\RApiPlus.h"

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <winsock2.h>
#include <conio.h>
#include  "C:\Users\User\Documents\forex\Trader\FastStart\EchoServer\cNetEventsProcDLL.h"
#pragma comment(lib, "NetEventsProcDLL")

#ifdef WinOS
#include <unistd.h>
#else
#include <Windows.h>
#endif

#define GOOD 0
#define BAD  1

using namespace std;
using namespace RApi;

/*   =====================================================================   */

BOOL FormatIP(DWORD u32_IP, char* s8_IP);
DWORD u32_Count = 8;
DWORD u32_Error;
int ph_Client[15];
DWORD u32_CountOld = 2;
int ps32_ClientIP[15];
int ps32_ClientCount[1];
bool g_bMdLoginComplete = false, serveropen = false;
double Bid = 0, Ask = 0;
int tuma = 0;

int main(int      argc,
	char * * argv,
	char * * envp);

/*   =====================================================================   */
/*                          class declarations                               */
/*   =====================================================================   */

bool OpenMT4Server()
{
	int s32_Port = 2000;
	bool success = false;
	u32_Error = cNetEventsProcDLL::ServerOpen(s32_Port);

	if (u32_Error)
	{
		std::cout << "\nServerOpen() failed with error...:" << u32_Error << std::endl;
	}
	else
	{
		std::cout << "\nServerOpen() fine, we now are waiting for connections...\n" << std::endl;
		success = true;
	}
	return(success);
}

void GetConnections()
{
	


}

void CloseMT4Server()
{
	u32_Error = cNetEventsProcDLL::ServerClose();

	if (u32_Error)
	{
		std::cout << "\nServerClose() failed with error:" << std::endl;
	}
	else
		std::cout << "\nServerClose() fine...\n" << std::endl;
}

BOOL FormatIP(DWORD u32_IP, char* s8_IP)
{
	DWORD u32_Len = strlen(s8_IP);

	if (u32_Len < 15)
		return FALSE;

	BYTE* pu8_Addr = (BYTE*)&u32_IP;
	sprintf(s8_IP, "%d.%d.%d.%d", pu8_Addr[0], pu8_Addr[1], pu8_Addr[2], pu8_Addr[3]);

	return TRUE;
}

/*   =====================================================================   */
/*                          class declarations                               */
/*   =====================================================================   */

class MyAdmCallbacks : public AdmCallbacks
{
public:
	MyAdmCallbacks() {};
	~MyAdmCallbacks() {};

	/*   ----------------------------------------------------------------   */

	virtual int Alert(AlertInfo * pInfo,
		void *      pContext,
		int *       aiCode);
};

/*   =====================================================================   */

class MyCallbacks : public RCallbacks
{
public:
	MyCallbacks() {};
	~MyCallbacks() {};

	/*   ----------------------------------------------------------------   */

	virtual int Alert(AlertInfo * pInfo,
		void *      pContext,
		int *       aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int AskQuote(AskInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BestAskQuote(AskInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BestBidAskQuote(BidInfo * pBid,
		AskInfo * pAsk,
		void *    pContext,
		int *     aiCode);

	virtual int BestBidQuote(BidInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BidQuote(BidInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BinaryContractList(BinaryContractListInfo * pInfo,
		void *                   pContext,
		int *                    aiCode);

	virtual int ClosePrice(ClosePriceInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int ClosingIndicator(ClosingIndicatorInfo * pInfo,
		void *                 pContext,
		int *                  aiCode);

	virtual int EndQuote(EndQuoteInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int EquityOptionStrategyList(EquityOptionStrategyListInfo * pInfo,
		void *                         pContext,
		int *                          aiCode);

	virtual int HighPrice(HighPriceInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int InstrumentByUnderlying(InstrumentByUnderlyingInfo * pInfo,
		void *                       pContext,
		int *                        aiCode);

	virtual int InstrumentSearch(InstrumentSearchInfo * pInfo,
		void *                 pContext,
		int *                  aiCode);

	virtual int LimitOrderBook(LimitOrderBookInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	virtual int LowPrice(LowPriceInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int MarketMode(MarketModeInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int OpenInterest(OpenInterestInfo * pInfo,
		void *             pContext,
		int *              aiCode);

	virtual int OpenPrice(OpenPriceInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int OpeningIndicator(OpeningIndicatorInfo * pInfo,
		void *                 pContext,
		int *                  aiCode);

	virtual int OptionList(OptionListInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int RefData(RefDataInfo * pInfo,
		void *        pContext,
		int *         aiCode);

	virtual int SettlementPrice(SettlementPriceInfo * pInfo,
		void *                pContext,
		int *                 aiCode);

	virtual int Strategy(StrategyInfo * pInfo,
		void *         pContext,
		int *          aiCode);

	virtual int StrategyList(StrategyListInfo * pInfo,
		void *             pContext,
		int *              aiCode);

	virtual int TradeCondition(TradeInfo * pInfo,
		void *      pContext,
		int *       aiCode);

	virtual int TradePrint(TradeInfo * pInfo,
		void *      pContext,
		int *       aiCode);

	virtual int TradeReplay(TradeReplayInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int TradeRoute(TradeRouteInfo * pInfo,
		void *           pContext,
		int *            aiCode);

	virtual int TradeRouteList(TradeRouteListInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	virtual int TradeVolume(TradeVolumeInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int Bar(BarInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int BarReplay(BarReplayInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int AccountList(AccountListInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int PasswordChange(PasswordChangeInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int ExchangeList(ExchangeListInfo * pInfo,
		void *             pContext,
		int *              aiCode);

	virtual int ExecutionReplay(ExecutionReplayInfo * pInfo,
		void *                pContext,
		int *                 aiCode);

	virtual int LineUpdate(LineInfo * pInfo,
		void *     pContext,
		int *      aiCode);

	virtual int OpenOrderReplay(OrderReplayInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int OrderReplay(OrderReplayInfo * pInfo,
		void *            pContext,
		int *             aiCode);

	virtual int PnlReplay(PnlReplayInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int PnlUpdate(PnlInfo * pInfo,
		void *    pContext,
		int *     aiCode);

	virtual int PriceIncrUpdate(PriceIncrInfo * pInfo,
		void *          pContext,
		int *           aiCode);

	virtual int ProductRmsList(ProductRmsListInfo * pInfo,
		void *               pContext,
		int *                aiCode);

	virtual int SingleOrderReplay(SingleOrderReplayInfo * pInfo,
		void *                  pContext,
		int *                   aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int BustReport(OrderBustReport * pReport,
		void *            pContext,
		int *             aiCode);

	virtual int CancelReport(OrderCancelReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int FailureReport(OrderFailureReport * pReport,
		void *               pContext,
		int *                aiCode);

	virtual int FillReport(OrderFillReport * pReport,
		void *            pContext,
		int *             aiCode);

	virtual int ModifyReport(OrderModifyReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int NotCancelledReport(OrderNotCancelledReport * pReport,
		void *                    pContext,
		int *                     aiCode);

	virtual int NotModifiedReport(OrderNotModifiedReport * pReport,
		void *                   pContext,
		int *                    aiCode);

	virtual int RejectReport(OrderRejectReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int StatusReport(OrderStatusReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int TradeCorrectReport(OrderTradeCorrectReport * pReport,
		void *                    pContext,
		int *                     aiCode);

	virtual int TriggerPulledReport(OrderTriggerPulledReport * pReport,
		void *                     pContext,
		int *                      aiCode);

	virtual int TriggerReport(OrderTriggerReport * pReport,
		void *              pContext,
		int *               aiCode);

	virtual int OtherReport(OrderReport * pReport,
		void *        pContext,
		int *         aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int SodUpdate(SodReport * pReport,
		void *      pContext,
		int *       aiCode);

	/*   ----------------------------------------------------------------   */

	virtual int Quote(QuoteReport * pReport,
		void *        pContext,
		int *         aiCode);

	/*   ----------------------------------------------------------------   */

	virtual void send(double &Bid, double &Ask);

	/*   ----------------------------------------------------------------   */

private:
};

/*   =====================================================================   */
/*                          class definitions                                */
/*   =====================================================================   */

void MyCallbacks::send(double &Bid, double &Ask)
{
	DWORD  u32_BufLen = 15;
	double sell, buy;
	double pd_Buf[15];
	int    ps32_ReadLen[3];

	sell = Bid;
	buy = Ask;
	u32_Error = cNetEventsProcDLL::GetAllConnections(ph_Client, ps32_ClientIP, ps32_ClientCount);

	if (u32_Error)
	{
		std::cout << "\nGetAllConnections(...) failed with error...:" << u32_Error << std::endl;
	}
	else
	{
		if (u32_Count != ps32_ClientCount[0])
		{
			cout << "Number of connections : " << u32_Count << endl;
		}
		u32_Count = ps32_ClientCount[0];
	}

	for (DWORD i = 0; i < u32_Count; i++)
	{
			pd_Buf[0] = 0;
			u32_Error = cNetEventsProcDLL::ReadFromDouble(ph_Client[i], pd_Buf, sizeof(pd_Buf), ps32_ReadLen);

			if (u32_Error)
			{
				printf("ReadFromDouble(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
			}

			if (ps32_ReadLen[0] > 0)
			{
				if (pd_Buf[0] > 0)
				{
					cout << "Value is : " << pd_Buf[0] << endl;
					pd_Buf[0] = 5.75;
					pd_Buf[1] = buy;
					pd_Buf[2] = sell;
					u32_Error = cNetEventsProcDLL::SendToDouble(ph_Client[i], pd_Buf, ps32_ReadLen[0]);

					if (u32_Error)
					{
						printf("SendToDouble(%d...) failed with error: %d\n", ph_Client[i], u32_Error);
					}
					else
					{
						cout << "Sent to Client : " << pd_Buf[0] << " : " << pd_Buf[1] << endl;
					}
				}
				cout << "Bid is : " << sell << " Ask is : " << buy << endl;
			}
			else
				cout << "Awaiting Signal from client" << endl;
	}

}


/*   =====================================================================   */

int MyAdmCallbacks::Alert(AlertInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::AccountList(AccountListInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::PasswordChange(PasswordChangeInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::Alert(AlertInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */
	/*   Signal when the login to the market data system (ticker plant)     */
	/*   is complete.                                                       */

	if (pInfo->iAlertType == ALERT_LOGIN_COMPLETE &&
		pInfo->iConnectionId == MARKET_DATA_CONNECTION_ID)
	{
		g_bMdLoginComplete = true;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ExchangeList(ExchangeListInfo * pInfo,
	void *             pContext,
	int *              aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ExecutionReplay(ExecutionReplayInfo * pInfo,
	void *                pContext,
	int *                 aiCode)
{
	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::LineUpdate(LineInfo * pInfo,
	void *     pContext,
	int *      aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::OpenOrderReplay(OrderReplayInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::OrderReplay(OrderReplayInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return(OK);
}


/*   =====================================================================   */

int MyCallbacks::PnlReplay(PnlReplayInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::PnlUpdate(PnlInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::PriceIncrUpdate(PriceIncrInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::ProductRmsList(ProductRmsListInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::SingleOrderReplay(SingleOrderReplayInfo * pInfo,
	void *                  pContext,
	int *                   aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::BustReport(OrderBustReport * pReport,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::CancelReport(OrderCancelReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::FailureReport(OrderFailureReport * pReport,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::FillReport(OrderFillReport * pReport,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::ModifyReport(OrderModifyReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::NotCancelledReport(OrderNotCancelledReport * pReport,
	void *                    pContext,
	int *                     aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::NotModifiedReport(OrderNotModifiedReport * pReport,
	void *                   pContext,
	int *                    aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::RejectReport(OrderRejectReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::StatusReport(OrderStatusReport * pReport,
	void *              pContext,
	int *               aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeCorrectReport(OrderTradeCorrectReport * pReport,
	void *                    pContext,
	int *                     aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TriggerPulledReport(OrderTriggerPulledReport * pReport,
	void *                     pContext,
	int *                      aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TriggerReport(OrderTriggerReport * pReport,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::OtherReport(OrderReport * pReport,
	void *        pContext,
	int *         aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::SodUpdate(SodReport * pReport,
	void *      pContext,
	int *       aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::Quote(QuoteReport * pReport,
	void *        pContext,
	int *         aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::AskQuote(AskInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BestAskQuote(AskInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl << "Best";
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	Ask = pInfo->dPrice;
	send(Bid, Ask);
	
	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BestBidAskQuote(BidInfo * pBid,
	AskInfo * pAsk,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl << "Best Bid/Ask";
	if (!pBid->dump(&iIgnored))
	{
		cout << "error in pBid -> dump : " << iIgnored << endl;
	}

	if (!pAsk->dump(&iIgnored))
	{
		cout << "error in pAsk -> dump : " << iIgnored << endl;
	}

	Bid = pBid->dPrice;
	Ask = pAsk->dPrice;
	send(Bid, Ask);

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BestBidQuote(BidInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl << "Best";
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	Bid = pInfo->dPrice;
	send(Bid, Ask);

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BidQuote(BidInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BinaryContractList(BinaryContractListInfo * pInfo,
	void *                   pContext,
	int *                    aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ClosePrice(ClosePriceInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::ClosingIndicator(ClosingIndicatorInfo * pInfo,
	void *                 pContext,
	int *                  aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::EndQuote(EndQuoteInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::EquityOptionStrategyList(EquityOptionStrategyListInfo * pInfo,
	void *                         pContext,
	int *                          aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::HighPrice(HighPriceInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::InstrumentByUnderlying(InstrumentByUnderlyingInfo * pInfo,
	void *                       pContext,
	int *                        aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::InstrumentSearch(InstrumentSearchInfo * pInfo,
	void *                 pContext,
	int *                  aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */
int MyCallbacks::LimitOrderBook(LimitOrderBookInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::LowPrice(LowPriceInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::MarketMode(MarketModeInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OpenInterest(OpenInterestInfo * pInfo,
	void *             pContext,
	int *              aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OpenPrice(OpenPriceInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OpeningIndicator(OpeningIndicatorInfo * pInfo,
	void *                 pContext,
	int *                  aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::OptionList(OptionListInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::RefData(RefDataInfo * pInfo,
	void *        pContext,
	int *         aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::SettlementPrice(SettlementPriceInfo * pInfo,
	void *                pContext,
	int *                 aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::Strategy(StrategyInfo * pInfo,
	void *         pContext,
	int *          aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::StrategyList(StrategyListInfo * pInfo,
	void *             pContext,
	int *              aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeCondition(TradeInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradePrint(TradeInfo * pInfo,
	void *      pContext,
	int *       aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeReplay(TradeReplayInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeRoute(TradeRouteInfo * pInfo,
	void *           pContext,
	int *            aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeRouteList(TradeRouteListInfo * pInfo,
	void *               pContext,
	int *                aiCode)
{
	*aiCode = API_OK;
	return(OK);
}

/*   =====================================================================   */

int MyCallbacks::TradeVolume(TradeVolumeInfo * pInfo,
	void *            pContext,
	int *             aiCode)
{
	int iIgnored;

	/*   ----------------------------------------------------------------   */

	cout << endl << endl;
	if (!pInfo->dump(&iIgnored))
	{
		cout << "error in pInfo -> dump : " << iIgnored << endl;
	}

	/*   ----------------------------------------------------------------   */

	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::Bar(BarInfo * pInfo,
	void *    pContext,
	int *     aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int MyCallbacks::BarReplay(BarReplayInfo * pInfo,
	void *          pContext,
	int *           aiCode)
{
	*aiCode = API_OK;
	return (OK);
}

/*   =====================================================================   */

int main(int      argc,
	char * * argv,
	char * * envp)
{
	char * USAGE = (char *)"SampleMD user password exchange ticker";

	REngine *        pEngine;
	MyAdmCallbacks * pAdmCallbacks;
	RCallbacks *     pCallbacks;
	REngineParams    oParams;
	LoginParams      oLoginParams;
	AskInfo *		 pInfo;
	tsNCharcb        sExchange;
	tsNCharcb        sTicker;
	char *           fake_envp[11];
	int              iFlags;
	int              iCode;
	void *			 context;

	/*   ----------------------------------------------------------------   */

	if (argc < 5)
	{
		cout << USAGE << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */

	if (!OpenMT4Server() && serveropen == false)
	{
		cout << "Error opening MT4 server: " << endl;
	}
	else
	{
		serveropen = true;
		cout << "Server connected " << endl;
		Sleep(10000);
	}

	try
	{
		pAdmCallbacks = new MyAdmCallbacks();
	}
	catch (OmneException& oEx)
	{
		iCode = oEx.getErrorCode();
		cout << "MyAdmCallbacks::MyAdmCallbacks() error : " << iCode << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   The following fake envp contains the settings for connecting to    */
	/*   Rithmic 01 Test.  To connect to a different instance of the        */
	/*   Rithmic trading platform, consult appropriate connection params    */
	/*   document in your download directory.                               */

	fake_envp[0] = "MML_DMN_SRVR_ADDR=rituz00100.00.rithmic.com:65000~rituz00100.00.rithmic.net:65000~rituz00100.00.theomne.net:65000~rituz00100.00.theomne.com:65000";
	fake_envp[1] = "MML_DOMAIN_NAME=rithmic_uat_dmz_domain";
	fake_envp[2] = "MML_LIC_SRVR_ADDR=rituz00100.00.rithmic.com:56000~rituz00100.00.rithmic.net:56000~rituz00100.00.theomne.net:56000~rituz00100.00.theomne.com:56000";
	fake_envp[3] = "MML_LOC_BROK_ADDR=rituz00100.00.rithmic.com:64100";
	fake_envp[4] = "MML_LOGGER_ADDR=rituz00100.00.rithmic.com:45454~rituz00100.00.rithmic.net:45454~rituz00100.00.theomne.com:45454~rituz00100.00.theomne.net:45454";
	fake_envp[5] = "MML_LOG_TYPE=log_net";

	/*   The SSL files are located in the ./<version>/etc directory         */
	/*   of the R | API package.  The settings below assume that those      */
	/*   files are in the current working directory.  Normally you should   */
	/*   specify the full path to these files.                              */
	fake_envp[6] = "MML_SSL_CLNT_AUTH_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_cert_auth_params";
	fake_envp[7] = "MML_SSL_CLNT_CERT_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_client_params";
	fake_envp[8] = "MML_SSL_CLNT_KEY_FILE=C:\\Users\\User\\Documents\\9.9.0.0\\etc\\rithmic_ssl_client_private_key";

	fake_envp[9] = "USER=andrew.kowuoche@gmail.com";
	fake_envp[10] = NULL;

	/*   ----------------------------------------------------------------   */
	/*   The following value for REngineParams::sAdmCnnctPt assumes the     */
	/*   app is connecting to the Rithmic 01 Test environment.              */
	/*   REngineParams::sAppName must be changed in order to log into the   */
	/*   Rithmic Paper Trading environment, or any production environment.  */

	oParams.sAppName.pData = "SampleMD";
	oParams.sAppName.iDataLen = (int)strlen(oParams.sAppName.pData);
	oParams.sAppVersion.pData = "1.0.0.0";
	oParams.sAppVersion.iDataLen = (int)strlen(oParams.sAppVersion.pData);
	oParams.sAdmCnnctPt.pData = "dd_admin_sslc";
	oParams.sAdmCnnctPt.iDataLen = (int)strlen(oParams.sAdmCnnctPt.pData);
	oParams.envp = fake_envp;
	oParams.pAdmCallbacks = pAdmCallbacks;
	oParams.sLogFilePath.pData = "smd.log";
	oParams.sLogFilePath.iDataLen = (int)strlen(oParams.sLogFilePath.pData);

	/*   ----------------------------------------------------------------   */

	try
	{
		pEngine = new REngine(&oParams);
	}
	catch (OmneException& oEx)
	{
		delete pAdmCallbacks;

		iCode = oEx.getErrorCode();
		cout << "REngine::REngine() error : " << iCode << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   instantiate a callback object - prerequisite for logging in */

	try
	{
		pCallbacks = new MyCallbacks();
	}
	catch (OmneException& oEx)
	{
		delete pEngine;
		delete pAdmCallbacks;

		iCode = oEx.getErrorCode();
		cout << "MyCallbacks::MyCallbacks() error : " << iCode << endl;
		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   Set up parameters for logging in.  Again, the MdCnnctPt and        */
	/*   TsCnnctPt have values for Rithmic 01 Test.  Add values for other   */
	/*   members of LoginParams to log into other subsystems of the         */
	/*   infrastructure like like pnl and history.                          */

	oLoginParams.pCallbacks = pCallbacks;

	oLoginParams.sMdUser.pData = argv[1];
	oLoginParams.sMdUser.iDataLen = (int)strlen(oLoginParams.sMdUser.pData);

	oLoginParams.sMdPassword.pData = argv[2];
	oLoginParams.sMdPassword.iDataLen = (int)strlen(oLoginParams.sMdPassword.pData);

	oLoginParams.sMdCnnctPt.pData = "login_agent_tpc";
	oLoginParams.sMdCnnctPt.iDataLen = (int)strlen(oLoginParams.sMdCnnctPt.pData);

	oLoginParams.sUser.pData = argv[1];
	oLoginParams.sUser.iDataLen = (int)strlen(oLoginParams.sUser.pData);

	oLoginParams.sPassword.pData = argv[2];
	oLoginParams.sPassword.iDataLen = (int)strlen(oLoginParams.sPassword.pData);

	oLoginParams.sTsCnnctPt.pData = "login_agent_opc";
	oLoginParams.sTsCnnctPt.iDataLen = (int)strlen(oLoginParams.sTsCnnctPt.pData);

	/*   ----------------------------------------------------------------   */

	if (!pEngine->login(&oLoginParams, &iCode))
	{
		cout << "REngine::login() error : " << iCode << endl;

		delete pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	/*   ----------------------------------------------------------------   */
	/*   After calling REngine::login, RCallbacks::Alert may be called a    */
	/*   number of times.  Wait for when the login to the MdCnnctPt is      */
	/*   complete.  (See MyCallbacks::Alert() for details).                 */

	while (!g_bMdLoginComplete)
	{
#ifdef WinOS
		sleep(1);
#else
		Sleep(1000);
#endif
	}

	/*   ----------------------------------------------------------------   */

	sExchange.pData = argv[3];
	sExchange.iDataLen = (int)strlen(sExchange.pData);

	/*   ----------------------------------------------------------------   */

	sTicker.pData = argv[4];
	sTicker.iDataLen = (int)strlen(sTicker.pData);

	/*   ----------------------------------------------------------------   */
	/*   Subscription flags are OR'd.  Add more flags to get more data.     */

	iFlags = (MD_PRINTS | MD_BEST);

	/*   ----------------------------------------------------------------   */

	if (!pEngine->subscribe(&sExchange, &sTicker, iFlags, &iCode))
	{
		cout << "REngine::subscribe() error : " << iCode << endl;

		delete pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	/*   ----------------------------------------------------------------   */

	sExchange.pData = "CME";
	sExchange.iDataLen = (int)strlen(sExchange.pData);

	/*   ----------------------------------------------------------------   */

	sTicker.pData = "NQH8";
	sTicker.iDataLen = (int)strlen(sTicker.pData);

	/*   ----------------------------------------------------------------   */

	/*   Subscription flags are OR'd.  Add more flags to get more data.     */

	iFlags = (MD_PRINTS | MD_BEST);

	/*   ----------------------------------------------------------------   */

	if (!pEngine->subscribe(&sExchange, &sTicker, iFlags, &iCode))
	{
		cout << "REngine::subscribe() error : " << iCode << endl;

		delete pEngine;
		delete pCallbacks;
		delete pAdmCallbacks;

		return (BAD);
	}

	/*   ----------------------------------------------------------------   */

	/*   press 'enter' to quit... */

	fgetc(stdin);

	/*   ----------------------------------------------------------------   */

	delete pEngine;
	delete pCallbacks;
	delete pAdmCallbacks;

	/*   ----------------------------------------------------------------   */

	return (GOOD);
}

/*   =====================================================================   */