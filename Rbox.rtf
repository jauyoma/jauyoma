{\rtf1\ansi\ansicpg1252\deff0\deflang2057{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22  /*   =====================================================================\par
\par
Copyright (c) 2017 by Omnesys Technologies, Inc.  All rights reserved.\par
\par
Warning :\par
        This Software Product is protected by copyright law and international\par
        treaties.  Unauthorized use, reproduction or distribution of this\par
        Software Product (including its documentation), or any portion of it,\par
        may result in severe civil and criminal penalties, and will be\par
        prosecuted to the maximum extent possible under the law.\par
\par
        Omnesys Technologies, Inc. will compensate individuals providing\par
        admissible evidence of any unauthorized use, reproduction, distribution\par
        or redistribution of this Software Product by any person, company or \par
        organization.\par
\par
This Software Product is licensed strictly in accordance with a separate\par
Software System License Agreement, granted by Omnesys Technologies, Inc., which\par
contains restrictions on use, reverse engineering, disclosure, confidentiality \par
and other matters.\par
\par
     =====================================================================   */\par
/*   =====================================================================\par
     Compile/link commands for linux and darwin using R | API+.  These should \par
     work if your pwd is the ./samples directory.  You may need to change the \par
     name of the RApi library if you are using one of the library variants, \par
     like R | API or R | Diamond API.\par
\par
     64-bit linux (2.6.32 kernel) :\par
\par
     g++ -O3 -DLINUX -D_REENTRANT -Wall -Wno-sign-compare -Wno-write-strings -Wpointer-arith -Winline -Wno-deprecated -fno-strict-aliasing -I../include -o SampleMD ../samples/SampleMD.cpp -L../linux-gnu-2.6.32-x86_64/lib -lRApiPlus-optimize -lOmneStreamEngine-optimize -lOmneChannel-optimize -lOmneEngine-optimize -l_api-optimize -l_apipoll-stubs-optimize -l_kit-optimize -lssl -lcrypto -L/usr/lib64 -lz -L/usr/kerberos/lib -lkrb5 -lk5crypto -lcom_err -lresolv -lm -lpthread -lrt\par
\par
     64-bit darwin :\par
\par
     g++ -O3 -DMacOS -D_REENTRANT -Wall -Wno-sign-compare -fno-strict-aliasing -Wpointer-arith -Winline -Wno-deprecated -Wno-write-strings -I../include -o ./SampleMD ../samples/SampleMD.cpp -L../darwin-10/lib -lRApiPlus-optimize -lOmneStreamEngine-optimize -lOmneChannel-optimize -lOmneEngine-optimize -l_api-optimize -l_apipoll-stubs-optimize -l_kit-optimize -lssl -lcrypto -L/usr/lib -lz -L/usr/lib -lkrb5 -lresolv -lm -lpthread\par
\par
     =====================================================================   */\par
\par
#include "C:\\Users\\User\\Documents\\9.9.0.0\\include\\RApiPlus.h"\par
\par
#include <iostream>\par
#include <stdlib.h>\par
#include <string.h>\par
#include <stdio.h>\par
\par
#ifdef WinOS\par
#include <unistd.h>\par
#else\par
#include <Windows.h>\par
#endif\par
\par
#define GOOD 0\par
#define BAD  1\par
\par
using namespace std;\par
using namespace RApi;\par
\par
/*   =====================================================================   */\par
\par
bool g_bMdLoginComplete = false;\par
\par
int main(int      argc,\par
         char * * argv,\par
         char * * envp);\par
\par
/*   =====================================================================   */\par
/*                          class declarations                               */\par
/*   =====================================================================   */\par
\par
class MyAdmCallbacks: public AdmCallbacks\par
     \{\par
     public :\par
     MyAdmCallbacks()  \{\};\par
     ~MyAdmCallbacks() \{\};\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     virtual int Alert(AlertInfo * pInfo,\par
                       void *      pContext,\par
                       int *       aiCode);\par
     \};\par
\par
/*   =====================================================================   */\par
\par
class MyCallbacks: public RCallbacks\par
     \{\par
     public :\par
     MyCallbacks()  \{\};\par
     ~MyCallbacks() \{\};\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     virtual int Alert(AlertInfo * pInfo,\par
                       void *      pContext,\par
                       int *       aiCode);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     virtual int AskQuote(AskInfo * pInfo,\par
                          void *    pContext,\par
                          int *     aiCode);\par
\par
     virtual int BestAskQuote(AskInfo * pInfo,\par
                              void *    pContext,\par
                              int *     aiCode);\par
\par
     virtual int BestBidAskQuote(BidInfo * pBid,\par
\tab\tab\tab\tab  AskInfo * pAsk,\par
\tab\tab\tab\tab  void *    pContext,\par
\tab\tab\tab\tab  int *     aiCode);\par
\par
     virtual int BestBidQuote(BidInfo * pInfo,\par
                              void *    pContext,\par
                              int *     aiCode);\par
\par
     virtual int BidQuote(BidInfo * pInfo,\par
                          void *    pContext,\par
                          int *     aiCode);\par
\par
     virtual int BinaryContractList(BinaryContractListInfo * pInfo,\par
\tab\tab\tab\tab     void *                   pContext,\par
\tab\tab\tab\tab     int *                    aiCode);\par
\par
     virtual int ClosePrice(ClosePriceInfo * pInfo,\par
                            void *           pContext,\par
                            int *            aiCode);\par
\par
     virtual int ClosingIndicator(ClosingIndicatorInfo * pInfo,\par
                                  void *                 pContext,\par
                                  int *                  aiCode);\par
\par
     virtual int EndQuote(EndQuoteInfo * pInfo,\par
                          void *         pContext,\par
                          int *          aiCode);\par
\par
     virtual int EquityOptionStrategyList(EquityOptionStrategyListInfo * pInfo,\par
\tab\tab\tab\tab\tab   void *                         pContext,\par
\tab\tab\tab\tab\tab   int *                          aiCode);\par
\par
     virtual int HighPrice(HighPriceInfo * pInfo,\par
                           void *          pContext,\par
                           int *           aiCode);\par
\par
     virtual int InstrumentByUnderlying(InstrumentByUnderlyingInfo * pInfo,\par
\tab\tab\tab\tab\tab void *                       pContext,\par
\tab\tab\tab\tab\tab int *                        aiCode);\par
\par
     virtual int InstrumentSearch(InstrumentSearchInfo * pInfo,\par
\tab\tab\tab\tab   void *                 pContext,\par
\tab\tab\tab\tab   int *                  aiCode);\par
\par
     virtual int LimitOrderBook(LimitOrderBookInfo * pInfo,\par
                                void *               pContext,\par
                                int *                aiCode);\par
\par
     virtual int LowPrice(LowPriceInfo * pInfo,\par
                          void *         pContext,\par
                          int *          aiCode);\par
\par
     virtual int MarketMode(MarketModeInfo * pInfo,\par
                            void *           pContext,\par
                            int *            aiCode);\par
\par
     virtual int OpenInterest(OpenInterestInfo * pInfo,\par
\tab\tab\tab       void *             pContext,\par
\tab\tab\tab       int *              aiCode);\par
\par
     virtual int OpenPrice(OpenPriceInfo * pInfo,\par
                           void *          pContext,\par
                           int *           aiCode);\par
\par
     virtual int OpeningIndicator(OpeningIndicatorInfo * pInfo,\par
\tab\tab\tab\tab   void *                 pContext,\par
\tab\tab\tab\tab   int *                  aiCode);\par
\par
     virtual int OptionList(OptionListInfo * pInfo,\par
                            void *           pContext,\par
                            int *            aiCode);\par
\par
     virtual int RefData(RefDataInfo * pInfo,\par
                         void *        pContext,\par
                         int *         aiCode);\par
\par
     virtual int SettlementPrice(SettlementPriceInfo * pInfo,\par
                                 void *                pContext,\par
                                 int *                 aiCode);\par
\par
     virtual int Strategy(StrategyInfo * pInfo,\par
\tab\tab\tab   void *         pContext,\par
\tab\tab\tab   int *          aiCode);\par
\par
     virtual int StrategyList(StrategyListInfo * pInfo,\par
\tab\tab\tab       void *             pContext,\par
\tab\tab\tab       int *              aiCode);\par
\par
     virtual int TradeCondition(TradeInfo * pInfo,\par
                                void *      pContext,\par
                                int *       aiCode);\par
\par
     virtual int TradePrint(TradeInfo * pInfo,\par
                            void *      pContext,\par
                            int *       aiCode);\par
\par
     virtual int TradeReplay(TradeReplayInfo * pInfo,\par
\tab\tab\tab      void *            pContext,\par
\tab\tab\tab      int *             aiCode);\par
\par
     virtual int TradeRoute(TradeRouteInfo * pInfo,\par
\tab\tab\tab     void *           pContext,\par
\tab\tab\tab     int *            aiCode);\par
\par
     virtual int TradeRouteList(TradeRouteListInfo * pInfo,\par
\tab\tab\tab\tab void *               pContext,\par
\tab\tab\tab\tab int *                aiCode);\par
\par
     virtual int TradeVolume(TradeVolumeInfo * pInfo,\par
                             void *            pContext,\par
                             int *             aiCode);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     virtual int Bar(BarInfo * pInfo,\par
\tab\tab      void *    pContext,\par
\tab\tab      int *     aiCode);\par
\par
     virtual int BarReplay(BarReplayInfo * pInfo,\par
\tab\tab\tab    void *          pContext,\par
\tab\tab\tab    int *           aiCode);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     virtual int AccountList(AccountListInfo * pInfo,\par
                             void *            pContext,\par
                             int *             aiCode);\par
\par
     virtual int PasswordChange(PasswordChangeInfo * pInfo,\par
\tab\tab\tab\tab void *               pContext,\par
\tab\tab\tab\tab int *                aiCode);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     virtual int ExchangeList(ExchangeListInfo * pInfo,\par
\tab\tab\tab       void *             pContext,\par
\tab\tab\tab       int *              aiCode);\par
\par
     virtual int ExecutionReplay(ExecutionReplayInfo * pInfo,\par
                                 void *                pContext,\par
                                 int *                 aiCode);\par
\par
     virtual int LineUpdate(LineInfo * pInfo,\par
                            void *     pContext,\par
                            int *      aiCode);\par
\par
     virtual int OpenOrderReplay(OrderReplayInfo * pInfo,\par
                                 void *            pContext,\par
                                 int *             aiCode);\par
\par
     virtual int OrderReplay(OrderReplayInfo * pInfo,\par
                             void *            pContext,\par
                             int *             aiCode);\par
\par
     virtual int PnlReplay(PnlReplayInfo * pInfo,\par
                           void *          pContext,\par
                           int *           aiCode);\par
\par
     virtual int PnlUpdate(PnlInfo * pInfo,\par
                           void *    pContext,\par
                           int *     aiCode);\par
\par
     virtual int PriceIncrUpdate(PriceIncrInfo * pInfo,\par
                                 void *          pContext,\par
                                 int *           aiCode);\par
\par
     virtual int ProductRmsList(ProductRmsListInfo * pInfo,\par
\tab\tab\tab\tab void *               pContext,\par
\tab\tab\tab\tab int *                aiCode);\par
\par
     virtual int SingleOrderReplay(SingleOrderReplayInfo * pInfo,\par
\tab\tab\tab\tab    void *                  pContext,\par
\tab\tab\tab\tab    int *                   aiCode);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     virtual int BustReport(OrderBustReport * pReport,\par
                            void *            pContext,\par
                            int *             aiCode);\par
\par
     virtual int CancelReport(OrderCancelReport * pReport,\par
                              void *              pContext,\par
                              int *               aiCode);\par
\par
     virtual int FailureReport(OrderFailureReport * pReport,\par
                               void *               pContext,\par
                               int *                aiCode);\par
\par
     virtual int FillReport(OrderFillReport * pReport,\par
                            void *            pContext,\par
                            int *             aiCode);\par
\par
     virtual int ModifyReport(OrderModifyReport * pReport,\par
                              void *              pContext,\par
                              int *               aiCode);\par
\par
     virtual int NotCancelledReport(OrderNotCancelledReport * pReport,\par
                                    void *                    pContext,\par
                                    int *                     aiCode);\par
\par
     virtual int NotModifiedReport(OrderNotModifiedReport * pReport,\par
                                   void *                   pContext,\par
                                   int *                    aiCode);\par
\par
     virtual int RejectReport(OrderRejectReport * pReport,\par
                              void *              pContext,\par
                              int *               aiCode);\par
\par
     virtual int StatusReport(OrderStatusReport * pReport,\par
                              void *              pContext,\par
                              int *               aiCode);\par
\par
     virtual int TradeCorrectReport(OrderTradeCorrectReport * pReport,\par
                                    void *                    pContext,\par
                                    int *                     aiCode);\par
\par
     virtual int TriggerPulledReport(OrderTriggerPulledReport * pReport,\par
                                     void *                     pContext,\par
                                     int *                      aiCode);\par
\par
     virtual int TriggerReport(OrderTriggerReport * pReport,\par
                               void *              pContext,\par
                               int *               aiCode);\par
\par
     virtual int OtherReport(OrderReport * pReport,\par
                             void *        pContext,\par
                             int *         aiCode);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     virtual int SodUpdate(SodReport * pReport,\par
                           void *      pContext,\par
                           int *       aiCode);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     virtual int Quote(QuoteReport * pReport,\par
\tab\tab        void *        pContext,\par
\tab\tab        int *         aiCode);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     private :\par
     \};\par
\par
/*   =====================================================================   */\par
/*                          class definitions                                */\par
/*   =====================================================================   */\par
\par
int MyAdmCallbacks::Alert(AlertInfo * pInfo,\par
                          void *      pContext,\par
                          int *       aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::AccountList(AccountListInfo * pInfo,\par
                             void *            pContext,\par
                             int *             aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::PasswordChange(PasswordChangeInfo * pInfo,\par
\tab\tab\tab\tab void *               pContext,\par
\tab\tab\tab\tab int *                aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::Alert(AlertInfo * pInfo,\par
                       void *      pContext,\par
                       int *       aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
     /*   Signal when the login to the market data system (ticker plant)     */\par
     /*   is complete.                                                       */\par
\par
     if (pInfo -> iAlertType == ALERT_LOGIN_COMPLETE &&\par
         pInfo -> iConnectionId == MARKET_DATA_CONNECTION_ID)\par
          \{\par
          g_bMdLoginComplete = true;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::ExchangeList(ExchangeListInfo * pInfo,\par
\tab\tab\tab       void *             pContext,\par
\tab\tab\tab       int *              aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::ExecutionReplay(ExecutionReplayInfo * pInfo,\par
                                 void *                pContext,\par
                                 int *                 aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::LineUpdate(LineInfo * pInfo,\par
                            void *     pContext,\par
                            int *      aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::OpenOrderReplay(OrderReplayInfo * pInfo,\par
                                 void *            pContext,\par
                                 int *             aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::OrderReplay(OrderReplayInfo * pInfo,\par
                             void *            pContext,\par
                             int *             aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::PnlReplay(PnlReplayInfo * pInfo,\par
                           void *          pContext,\par
                           int *           aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::PnlUpdate(PnlInfo * pInfo,\par
                           void *    pContext,\par
                           int *     aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::PriceIncrUpdate(PriceIncrInfo * pInfo,\par
                                 void *          pContext,\par
                                 int *           aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::ProductRmsList(ProductRmsListInfo * pInfo,\par
\tab\tab\tab\tab void *               pContext,\par
\tab\tab\tab\tab int *                aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::SingleOrderReplay(SingleOrderReplayInfo * pInfo,\par
\tab\tab\tab\tab    void *                  pContext,\par
\tab\tab\tab\tab    int *                   aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::BustReport(OrderBustReport * pReport,\par
                            void *            pContext,\par
                            int *             aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::CancelReport(OrderCancelReport * pReport,\par
                              void *              pContext,\par
                              int *               aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::FailureReport(OrderFailureReport * pReport,\par
                               void *               pContext,\par
                               int *                aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::FillReport(OrderFillReport * pReport,\par
                            void *            pContext,\par
                            int *             aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::ModifyReport(OrderModifyReport * pReport,\par
                              void *              pContext,\par
                              int *               aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::NotCancelledReport(OrderNotCancelledReport * pReport,\par
                                    void *                    pContext,\par
                                    int *                     aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::NotModifiedReport(OrderNotModifiedReport * pReport,\par
                                   void *                   pContext,\par
                                   int *                    aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::RejectReport(OrderRejectReport * pReport,\par
                              void *              pContext,\par
                              int *               aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::StatusReport(OrderStatusReport * pReport,\par
                              void *              pContext,\par
                              int *               aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::TradeCorrectReport(OrderTradeCorrectReport * pReport,\par
                                    void *                    pContext,\par
                                    int *                     aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::TriggerPulledReport(OrderTriggerPulledReport * pReport,\par
                                     void *                     pContext,\par
                                     int *                      aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::TriggerReport(OrderTriggerReport * pReport,\par
                               void *               pContext,\par
                               int *                aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::OtherReport(OrderReport * pReport,\par
                             void *        pContext,\par
                             int *         aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::SodUpdate(SodReport * pReport,\par
                           void *      pContext,\par
                           int *       aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::Quote(QuoteReport * pReport,\par
\tab\tab        void *        pContext,\par
\tab\tab        int *         aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::AskQuote(AskInfo * pInfo,\par
                          void *    pContext,\par
                          int *     aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::BestAskQuote(AskInfo * pInfo,\par
                              void *    pContext,\par
                              int *     aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl << "Best";\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::BestBidAskQuote(BidInfo * pBid,\par
\tab\tab\tab\tab  AskInfo * pAsk,\par
\tab\tab\tab\tab  void *    pContext,\par
\tab\tab\tab\tab  int *     aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl << "Best Bid/Ask";\par
     if (!pBid -> dump(&iIgnored))\par
          \{\par
          cout << "error in pBid -> dump : " << iIgnored << endl;\par
          \}\par
\par
     if (!pAsk -> dump(&iIgnored))\par
          \{\par
          cout << "error in pAsk -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::BestBidQuote(BidInfo * pInfo,\par
                              void *    pContext,\par
                              int *     aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl << "Best";\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::BidQuote(BidInfo * pInfo,\par
                          void *    pContext,\par
                          int *     aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::BinaryContractList(BinaryContractListInfo * pInfo,\par
\tab\tab\tab\tab     void *                   pContext,\par
\tab\tab\tab\tab     int *                    aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::ClosePrice(ClosePriceInfo * pInfo,\par
                            void *           pContext,\par
                            int *            aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::ClosingIndicator(ClosingIndicatorInfo * pInfo,\par
                                  void *                 pContext,\par
                                  int *                  aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::EndQuote(EndQuoteInfo * pInfo,\par
\tab\tab\tab   void *         pContext,\par
\tab\tab\tab   int *          aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::EquityOptionStrategyList(EquityOptionStrategyListInfo * pInfo,\par
\tab\tab\tab\tab\tab   void *                         pContext,\par
\tab\tab\tab\tab\tab   int *                          aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::HighPrice(HighPriceInfo * pInfo,\par
                           void *          pContext,\par
                           int *           aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::InstrumentByUnderlying(InstrumentByUnderlyingInfo * pInfo,\par
\tab\tab\tab\tab\tab void *                       pContext,\par
\tab\tab\tab\tab\tab int *                        aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::InstrumentSearch(InstrumentSearchInfo * pInfo,\par
\tab\tab\tab\tab   void *                 pContext,\par
\tab\tab\tab\tab   int *                  aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
int MyCallbacks::LimitOrderBook(LimitOrderBookInfo * pInfo,\par
                                void *               pContext,\par
                                int *                aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::LowPrice(LowPriceInfo * pInfo,\par
                          void *         pContext,\par
                          int *          aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::MarketMode(MarketModeInfo * pInfo,\par
                            void *           pContext,\par
                            int *            aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::OpenInterest(OpenInterestInfo * pInfo,\par
\tab\tab\tab       void *             pContext,\par
\tab\tab\tab       int *              aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::OpenPrice(OpenPriceInfo * pInfo,\par
                           void *          pContext,\par
                           int *           aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::OpeningIndicator(OpeningIndicatorInfo * pInfo,\par
\tab\tab\tab\tab   void *                 pContext,\par
\tab\tab\tab\tab   int *                  aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::OptionList(OptionListInfo * pInfo,\par
\tab\tab\tab     void *           pContext,\par
\tab\tab\tab     int *            aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::RefData(RefDataInfo * pInfo,\par
                         void *        pContext,\par
                         int *         aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::SettlementPrice(SettlementPriceInfo * pInfo,\par
                                 void *                pContext,\par
                                 int *                 aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::Strategy(StrategyInfo * pInfo,\par
\tab\tab\tab   void *         pContext,\par
\tab\tab\tab   int *          aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::StrategyList(StrategyListInfo * pInfo,\par
\tab\tab\tab       void *             pContext,\par
\tab\tab\tab       int *              aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::TradeCondition(TradeInfo * pInfo,\par
                                void *      pContext,\par
                                int *       aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::TradePrint(TradeInfo * pInfo,\par
                            void *      pContext,\par
                            int *       aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::TradeReplay(TradeReplayInfo * pInfo,\par
\tab\tab\tab      void *            pContext,\par
\tab\tab\tab      int *             aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::TradeRoute(TradeRouteInfo * pInfo,\par
\tab\tab\tab     void *           pContext,\par
\tab\tab\tab     int *            aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::TradeRouteList(TradeRouteListInfo * pInfo,\par
\tab\tab\tab\tab void *               pContext,\par
\tab\tab\tab\tab int *                aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return(OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::TradeVolume(TradeVolumeInfo * pInfo,\par
                             void *            pContext,\par
                             int *             aiCode)\par
     \{\par
     int iIgnored;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     cout << endl << endl;\par
     if (!pInfo -> dump(&iIgnored))\par
          \{\par
          cout << "error in pInfo -> dump : " << iIgnored << endl;\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::Bar(BarInfo * pInfo,\par
\tab\tab      void *    pContext,\par
\tab\tab      int *     aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int MyCallbacks::BarReplay(BarReplayInfo * pInfo,\par
\tab\tab\tab    void *          pContext,\par
\tab\tab\tab    int *           aiCode)\par
     \{\par
     *aiCode = API_OK;\par
     return (OK);\par
     \}\par
\par
/*   =====================================================================   */\par
\par
int main(int      argc,\par
         char * * argv,\par
         char * * envp)\par
     \{\par
     char * USAGE = (char *)"SampleMD user password exchange ticker";\par
\par
     REngine *        pEngine;\par
     MyAdmCallbacks * pAdmCallbacks;\par
     RCallbacks *     pCallbacks;\par
     REngineParams    oParams;\par
     LoginParams      oLoginParams;\par
     tsNCharcb        sExchange;\par
     tsNCharcb        sTicker;\par
     char *           fake_envp[11];\par
     int              iFlags;\par
     int              iCode;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     if (argc < 5)\par
          \{\par
          cout << USAGE << endl;\par
          return (BAD);\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     try\par
          \{\par
          pAdmCallbacks = new MyAdmCallbacks();\par
          \}\par
     catch (OmneException& oEx)\par
          \{\par
          iCode = oEx.getErrorCode();\par
          cout << "MyAdmCallbacks::MyAdmCallbacks() error : " << iCode << endl;\par
          return (BAD);\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
     /*   The following fake envp contains the settings for connecting to    */\par
     /*   Rithmic 01 Test.  To connect to a different instance of the        */\par
     /*   Rithmic trading platform, consult appropriate connection params    */\par
     /*   document in your download directory.                               */\par
\par
     fake_envp[0]  = "MML_DMN_SRVR_ADDR=rituz00100.00.rithmic.com:65000~rituz00100.00.rithmic.net:65000~rituz00100.00.theomne.net:65000~rituz00100.00.theomne.com:65000";\par
     fake_envp[1]  = "MML_DOMAIN_NAME=rithmic_uat_dmz_domain";\par
     fake_envp[2]  = "MML_LIC_SRVR_ADDR=rituz00100.00.rithmic.com:56000~rituz00100.00.rithmic.net:56000~rituz00100.00.theomne.net:56000~rituz00100.00.theomne.com:56000";\par
     fake_envp[3]  = "MML_LOC_BROK_ADDR=rituz00100.00.rithmic.com:64100";\par
     fake_envp[4]  = "MML_LOGGER_ADDR=rituz00100.00.rithmic.com:45454~rituz00100.00.rithmic.net:45454~rituz00100.00.theomne.com:45454~rituz00100.00.theomne.net:45454";\par
     fake_envp[5]  = "MML_LOG_TYPE=log_net";\par
\par
     /*   The SSL files are located in the ./<version>/etc directory         */\par
     /*   of the R | API package.  The settings below assume that those      */\par
     /*   files are in the current working directory.  Normally you should   */\par
     /*   specify the full path to these files.                              */\par
     fake_envp[6]  = "MML_SSL_CLNT_AUTH_FILE=C:\\\\Users\\\\User\\\\Documents\\\\9.9.0.0\\\\etc\\\\rithmic_ssl_cert_auth_params";\par
     fake_envp[7]  = "MML_SSL_CLNT_CERT_FILE=C:\\\\Users\\\\User\\\\Documents\\\\9.9.0.0\\\\etc\\\\rithmic_ssl_client_params";\par
     fake_envp[8]  = "MML_SSL_CLNT_KEY_FILE=C:\\\\Users\\\\User\\\\Documents\\\\9.9.0.0\\\\etc\\\\rithmic_ssl_client_private_key";\par
\par
     fake_envp[9]  = "USER=andrew.kowuoche@gmail.com";\par
     fake_envp[10] = NULL;\par
\par
     /*   ----------------------------------------------------------------   */\par
     /*   The following value for REngineParams::sAdmCnnctPt assumes the     */\par
     /*   app is connecting to the Rithmic 01 Test environment.              */\par
     /*   REngineParams::sAppName must be changed in order to log into the   */\par
     /*   Rithmic Paper Trading environment, or any production environment.  */\par
\par
     oParams.sAppName.pData        = "SampleMD";\par
     oParams.sAppName.iDataLen     = (int)strlen(oParams.sAppName.pData);\par
     oParams.sAppVersion.pData     = "1.0.0.0";\par
     oParams.sAppVersion.iDataLen  = (int)strlen(oParams.sAppVersion.pData);\par
     oParams.sAdmCnnctPt.pData     = "dd_admin_sslc";\par
     oParams.sAdmCnnctPt.iDataLen  = (int)strlen(oParams.sAdmCnnctPt.pData);\par
     oParams.envp                  = fake_envp;\par
     oParams.pAdmCallbacks         = pAdmCallbacks;\par
     oParams.sLogFilePath.pData    = "smd.log";\par
     oParams.sLogFilePath.iDataLen = (int)strlen(oParams.sLogFilePath.pData);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     try\par
          \{\par
          pEngine = new REngine(&oParams);\par
          \}\par
     catch (OmneException& oEx)\par
          \{\par
          delete pAdmCallbacks;\par
\par
          iCode = oEx.getErrorCode();\par
          cout << "REngine::REngine() error : " << iCode << endl;\par
          return (BAD);\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
     /*   instantiate a callback object - prerequisite for logging in */\par
\par
     try\par
          \{\par
          pCallbacks = new MyCallbacks();\par
          \}\par
     catch (OmneException& oEx)\par
          \{\par
          delete pEngine;\par
          delete pAdmCallbacks;\par
\par
          iCode = oEx.getErrorCode();\par
          cout << "MyCallbacks::MyCallbacks() error : " << iCode << endl;\par
          return (BAD);\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
     /*   Set up parameters for logging in.  Again, the MdCnnctPt and        */\par
     /*   TsCnnctPt have values for Rithmic 01 Test.  Add values for other   */\par
     /*   members of LoginParams to log into other subsystems of the         */\par
     /*   infrastructure like like pnl and history.                          */\par
\par
     oLoginParams.pCallbacks           = pCallbacks;\par
\par
     oLoginParams.sMdUser.pData        = argv[1];\par
     oLoginParams.sMdUser.iDataLen     = (int)strlen(oLoginParams.sMdUser.pData);\par
\par
     oLoginParams.sMdPassword.pData    = argv[2];\par
     oLoginParams.sMdPassword.iDataLen = (int)strlen(oLoginParams.sMdPassword.pData);\par
\par
     oLoginParams.sMdCnnctPt.pData     = "login_agent_tpc";\par
     oLoginParams.sMdCnnctPt.iDataLen  = (int)strlen(oLoginParams.sMdCnnctPt.pData);\par
\par
     oLoginParams.sUser.pData          = argv[1];\par
     oLoginParams.sUser.iDataLen       = (int)strlen(oLoginParams.sUser.pData);\par
\par
     oLoginParams.sPassword.pData      = argv[2];\par
     oLoginParams.sPassword.iDataLen   = (int)strlen(oLoginParams.sPassword.pData);\par
\par
     oLoginParams.sTsCnnctPt.pData     = "login_agent_opc";\par
     oLoginParams.sTsCnnctPt.iDataLen  = (int)strlen(oLoginParams.sTsCnnctPt.pData);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     if (!pEngine -> login(&oLoginParams, &iCode))\par
          \{\par
          cout << "REngine::login() error : " << iCode << endl;\par
\par
          delete pEngine;\par
          delete pCallbacks;\par
          delete pAdmCallbacks;\par
\par
          return (BAD);\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
     /*   After calling REngine::login, RCallbacks::Alert may be called a    */\par
     /*   number of times.  Wait for when the login to the MdCnnctPt is      */\par
     /*   complete.  (See MyCallbacks::Alert() for details).                 */\par
\par
     while (!g_bMdLoginComplete)\par
          \{\par
#ifdef WinOS\par
          sleep(1);\par
#else\par
          Sleep(1000);\par
#endif\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     sExchange.pData    = argv[3];\par
     sExchange.iDataLen = (int)strlen(sExchange.pData);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     sTicker.pData    = argv[4];\par
     sTicker.iDataLen = (int)strlen(sTicker.pData);\par
\par
     /*   ----------------------------------------------------------------   */\par
     /*   Subscription flags are OR'd.  Add more flags to get more data.     */\par
\par
     iFlags = (MD_PRINTS | MD_BEST);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     if (!pEngine -> subscribe(&sExchange, &sTicker, iFlags, &iCode))\par
          \{\par
          cout << "REngine::subscribe() error : " << iCode << endl;\par
\par
          delete pEngine;\par
          delete pCallbacks;\par
          delete pAdmCallbacks;\par
\par
          return (BAD);\par
          \}\par
\par
     /*   ----------------------------------------------------------------   */\par
     /*   press 'enter' to quit... */\par
\par
     fgetc(stdin);\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     delete pEngine;\par
     delete pCallbacks;\par
     delete pAdmCallbacks;\par
\par
     /*   ----------------------------------------------------------------   */\par
\par
     return (GOOD);\par
     \}\par
\par
/*   =====================================================================   */\par
}
 